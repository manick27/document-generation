/*
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.myDsl.Document
import org.xtext.example.myDsl.Page
import java.util.HashMap
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GrammarGenerator extends AbstractGenerator {
	
	val Context context1 = new Context()

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

        // _ over all root elements of the resource
        for (element : resource.allContents.toIterable) {
            if (element instanceof Document) {
                    
                //val fileName = resource.URI.trimFileExtension.lastSegment
		        val seqgeneratorHtml = new HtmlCodeGenerator
		        
		        val fileName = seqgeneratorHtml.getValueOfVariableInData(element.build.variable.name, element.data, context1)   
            
            	if (element.build !== null) {
            		if(element.build.allInOne !== null && element.build.falseF !== null) {
            			for (elementBuild : element.build.elementBuild) {		                
							if (elementBuild.page !== null) {
			                	val StringBuilder seqgeneratedCode = new StringBuilder
			                	val StringBuilder nameOfPage = new StringBuilder
								seqgeneratedCode.append(buildHtmlCodeForPage(elementBuild.page, element, -1, seqgeneratorHtml, context1))
								nameOfPage.append(getName(elementBuild.page, seqgeneratorHtml, element, -1))
			                	fsa.generateFile(fileName+'/html/' + nameOfPage + ".html", seqgeneratedCode)
			                	fsa.generateFile(fileName+'/txt/' + nameOfPage + ".txt", seqgeneratedCode)
							} else if(elementBuild.loop !== null) {
								if(elementBuild.loop.forLoop !== null) {
									if(0 <= elementBuild.loop.forLoop.initWithInteger) {
										var p = elementBuild.loop.forLoop.initWithInteger
										for(otherElement : elementBuild.loop.forLoop.otherElement) {
											if(otherElement.page !== null) {
												 if(elementBuild.loop.forLoop.endWithVariable !== null) {
													context1.setVariable(elementBuild.loop.forLoop.increment.name, p)
													for (var i = p; i < seqgeneratorHtml.getLengthForArray(elementBuild.loop.forLoop.endWithVariable.name, element.data, context1); i++) {
			                							val StringBuilder seqgeneratedCode = new StringBuilder
			                							val StringBuilder nameOfPage = new StringBuilder
			                							val incrementValue = context1.getVariable(elementBuild.loop.forLoop.increment.name) as Integer
												        seqgeneratedCode.append(buildHtmlCodeForPage(otherElement.page, element, incrementValue, seqgeneratorHtml, context1))
														nameOfPage.append(getName(otherElement.page, seqgeneratorHtml, element, incrementValue))
			                							fsa.generateFile(fileName+'/html/' + nameOfPage + ".html", seqgeneratedCode)
			                							context1.incrementVariable(elementBuild.loop.forLoop.increment.name, 1)
													}										
												} else if(0 <= elementBuild.loop.forLoop.endWithInteger){
													for(var i = p; i<=elementBuild.loop.forLoop.endWithInteger; i++) {
			                							val StringBuilder seqgeneratedCode = new StringBuilder
			                							val StringBuilder nameOfPage = new StringBuilder
			                							val incrementValue = context1.getVariable(elementBuild.loop.forLoop.increment.name) as Integer
														seqgeneratedCode.append(buildHtmlCodeForPage(otherElement.page, element, incrementValue, seqgeneratorHtml, context1))
														nameOfPage.append(getName(elementBuild.page, seqgeneratorHtml, element, incrementValue))
			                							fsa.generateFile(fileName+'/html/' + nameOfPage + ".html", seqgeneratedCode)
			                							context1.incrementVariable(elementBuild.loop.forLoop.increment.name, 1)
													}									
												}
											}
										}							
									}
								} else if(elementBuild.loop.withLoop !== null) {
									if(elementBuild.loop.withLoop.init !== null && elementBuild.loop.withLoop.variable !== null) {
										for(otherElement : elementBuild.loop.withLoop.otherElement) {
											if(otherElement.page !== null) { 
												for(var i=0; i<seqgeneratorHtml.getLengthForArray(elementBuild.loop.withLoop.variable.name, element.data, context1); i++) {
													var object = seqgeneratorHtml.getObjetInArray(elementBuild.loop.withLoop.variable.name, element.data, i, context1)
													context1.setVariable(elementBuild.loop.withLoop.init.name, object)
													buildWithLoopPage(buildCode, otherElement.page, document, elementBuild.loop.withLoop.init.name, context1)
												}
											}
										}
									}
								}
							}
						}
            		} else {
	                	val seqgeneratedCode =  seqgeneratorHtml.generate(element, fileName.toString, context1)					
	                	fsa.generateFile(fileName+'/html/' + fileName + ".html", seqgeneratedCode)
	                	fsa.generateFile(fileName+'/txt/' + fileName + ".txt", seqgeneratedCode)            			
            		}
				}
            }
        }
    }
    
    def	buildHtmlCodeForPage(Page page, Document document, int position, HtmlCodeGenerator seqgeneratorHtml, Context context1) {
    	val seqgeneratorCss = new CssCodeGenerator
    	val StringBuilder cssCode = seqgeneratorCss.generate(document.style)
    	val StringBuilder buildCode = new StringBuilder
    	seqgeneratorHtml.buildPage(buildCode, page, document, context1)
    	
    	val StringBuilder code = new StringBuilder
    	code.append('''
		<!DOCTYPE html>
		<html lang="en">
			<head>
			    <meta charset="UTF-8">
			    <meta name="viewport" content="width=device-width, initial-scale=1.0">
			    <title>''' + getName(page, seqgeneratorHtml, document, position) + '''</title>
				<style>''' + cssCode + '''</style>
			</head>
			<body>
			    ''' + buildCode + '''
			</body>
		</html>''')
		
		return code
    }
    
    def getName(Page page, HtmlCodeGenerator seqgeneratorHtml, Document document, int position) {
    	if(page !== null) {
			if (page.string !== null) {
				return page.string
			} else if (page.variable !== null && page.arrayC !== null && position !== -1) {
				return seqgeneratorHtml.getValueOfVariableInArray(page.variable.name, position, document.data, context1)
			} else if (page.variable !== null) {
				return seqgeneratorHtml.getValueOfVariableInData(page.variable.name, document.data, context1)
			}
    	}
    }
}

class Context {
    private HashMap<String, Object> variables = new HashMap();

    // Méthode pour définir la valeur d'une variable
    def setVariable(String name, Object value) {
        variables.put(name, value);
    }

    // Méthode pour obtenir la valeur d'une variable
    def getVariable(String name) {
        return variables.get(name);
    }

    // Méthode pour supprimer une variable
    def removeVariable(String name) {
        variables.remove(name)
    }

    // Méthode pour incrémenter la valeur d'une variable
    def incrementVariable(String name, int amount) {
        val current = getVariable(name)
        if (current instanceof Integer) {
            val incremented = current + amount
            setVariable(name, incremented)
        } else {
            throw new IllegalArgumentException("Variable '" + name + "' is not a number and cannot be incremented.")
        }
    }
    
    // Méthode pour ajouter un élément à un tableau dans la HashMap
    def addToArray(String name, Number value) {
        val array = variables.getOrDefault(name, new ArrayList<Number>()) as ArrayList<Number>
        array.add(value)
        variables.put(name, array)
    }
    
    def getArray(String name) {
        return variables.getOrDefault(name, new ArrayList<Number>());
    }
}
