grammar org.xtext.example.Grammar with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.example.org/Grammar/MyDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	document+=Document; 
	
Document:
    (data=Data)? build=Build (style=Style)?;
    
//Section de définitions des données du document
Data:
    'data' '{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*) '}';

KeyValue:
    string=STRING ':' value=Value;

Value:
    string=STRING | integer=INT | floatValue=Float | trueV=TRUE | falseV=FALSE | array=Array | nestedObject=NestedObject | variable=Variable;

Array:
    '[' (values+=Value (',' values+=Value)*)? ']';

NestedObject:
    '{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*)? '}';
    
    
// Section de construction du document
Build:
    'document' variable=Variable (extensions=ExtensionList)? (allInOne = 'allInOne' '=' (trueV=TRUE | falseF=FALSE)) '{'
        (elementBuild+=ElementBuild)*
    '}';

ExtensionList:
    'extensions' '=' '[' (extensions+=SingleExtension (',' extensions+=SingleExtension)*)? ']';

SingleExtension:
    xlsx='xlsx' | html='html' | pdf='pdf' | doc='docx';

ElementBuild:
	variableD=VariableD | page=Page | loop=Loop | conditional=Conditional
;

Variable:
    '$' name=ID;

SuperVariable:
	name=ID
;

VariableD:
    superVariable=SuperVariable '=' (value=Value | classVariable=ClassVariable | function+=Function)
;

Page:
    'page' '(' (variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING )')' '{'
    	(titles+=Title)*
        (elementPage+=ElementPage)*
    '}'
;

ElementPage:
	row=Row | loop=Loop | conditional=Conditional | (variable=VariableD ';')
;

Title:
	bigTitle=BigTitle | subTitle=SubTitle | subSubTitle=SubSubTitle
;

BigTitle:
	'title' ':' (variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING ) classD=ClassD
;

SubTitle:
	'subtitle' ':' (variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING ) classD=ClassD
;

SubSubTitle:
	'subsubtitle' ':' (variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING ) classD=ClassD
;

Row:
    'row' '{'
        (elementRow+=ElementRow)*
    '}'
;

ElementRow:
	variable=Variable | variableD=VariableD | col=Col | conditional=Conditional | loop=Loop
;

Col:
    'col' fusion=Fusion ( img=Img | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | variableD=VariableD | string=STRING | integer=INT | floatValue=Float | function=Function ) classD=ClassD
; 

ArrayC:
    '[' position=Position ']';
    
Position:
	integer=INT | variable=Variable
; 

ObjectC:
	'.' name=ID
;

Img:
	'img' (classD=ClassD) 'src' ':' (string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?) ('alt' ':' stringAlt=STRING)?
;
    
ClassD:
	('class' '=' string=STRING)?
;

Fusion:
	(colspan=Colspan | rowspan=Rowspan)?
;

Colspan:
	'colspan' ':' (integer=INT | variable=Variable)
;

Rowspan:
	'rowspan' ':' (integer=INT | variable=Variable)
;

Function:
    sumFunction=SumFunction | prodFunction=ProdFunction | divFunction=DivFunction
;

SumFunction:
	'SUM' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' (argument2+=Argument2)+ ']') ')'
;

ProdFunction:
	'PROD' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' argument2+=Argument2 ']') ')'
;

DivFunction:
	'DIV' '(' argument1+=Argument1 ',' argument1+=Argument1 ')'
;

Argument1:
	integer=INT | floatValue=Float | string=STRING | classVariable=ClassVariable | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
;

Argument2:
	(variable+=Variable | integer=INT) (('-' | '+') (variable+=Variable | integerEnd1=INT))? ',' (variable+=Variable | integerEnd2=INT) (('-' | '+') (variable+=Variable | integerEnd3=INT))?
;

ClassVariable:
	'.' name=ID
;

Conditional:
	ifCondition=IfCondition (elseCondion+=ElseCondition)*
;

IfCondition:
    'if' '(' condition=Condition1 ')' 'then' '{'
        (otherElement+=OtherElement)*
    '}'
;

ElseCondition:
	'else' (('{'
		(OtherElement+=OtherElement)
		'}'
	) |
	ifCondition=IfCondition
	)
;

Condition1:
	firstPart=Part compare=Compare secondPart=Part
;

Part:
	variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING | integer=INT | superVariable=SuperVariable | classVariable=ClassVariable
;

Compare:
	'==' | '!=' | '<' | '>'
;
Loop:
    withLoop=With | forLoop=For
;

With:
	'with' init=Variable 'in' variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? '{'
        (otherElement+=OtherElement)*
    '}'
;

For:
	increment=Variable 'from' (initWithVariable=Variable | initWithInteger=INT) 'to' (endWithVariable=Variable (objectC=ObjectC)? | endWithInteger=INT)'{'
        (otherElement+=OtherElement)*
    '}'
;

OtherElement:
	page=Page | row=Row | col=Col | loop=Loop | conditional=Conditional
;
    
//Section de définition du style du document
Style:
    'style' '{' css=Css '}';

Css:
    (rules+=Rule)*;

Rule:
    selector=Selector "{"
        (declarations+=Declaration)*
    "}";

Selector:
    idSelector=IDSelector | classSelector=ClassSelector | typeSelector=TypeSelector;

IDSelector:
    '#' name=ID;

ClassSelector:
    '.' name=ID;

TypeSelector:
    name=ID;

Declaration:
    property=ID ":" (cssValue+=CssValue)+ ";";
    
CssValue:
	name=ID | string=STRING | integer=INT | coma=COMA | apostrophe=APOSTROPHE | hashtag=HASHTAG | pourcent=POURCENT
;

terminal STRING: '"' ('\\' . | !('\\' | '"'))* '"';
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal ID: ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '-' | '#')*;
TRUE: 'true';
FALSE: 'false';
HASHTAG: '#';
POURCENT: '%';
COMA: ',';
APOSTROPHE: "'";
Float:
	firstInt=INT '.' secondInt=INT
;