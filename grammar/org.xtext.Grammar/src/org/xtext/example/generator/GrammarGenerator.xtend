/*
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.myDsl.Document 
import org.xtext.example.myDsl.Page
import org.xtext.example.myDsl.Value
import java.util.HashMap
import java.util.ArrayList
import java.io.FileOutputStream
import java.io.File
import java.util.List
import java.io.IOException

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GrammarGenerator extends AbstractGenerator {
	
	val Context context1 = new Context()

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

        // _ over all root elements of the resource
        for (element : resource.allContents.toIterable) {
            if (element instanceof Document) {
                    
                //val fileName = resource.URI.trimFileExtension.lastSegment
		        val seqgeneratorHtml = new HtmlCodeGenerator(context1)
		        val seqgeneratorXlsx = new ExcelFileGenerator(context1)
		        val seqgeneratorPdf = new PdfFileGenerator(context1)
		        val seqgeneratorDocx = new DocxFileGenerator(context1)
		        
		        var String fileName = seqgeneratorHtml.getValueOfVariableInData(element.build.variable.name, element.data) as String
            	fileName = fileName.replace(' ', '_')
            	if (element.build !== null) {
            		if(element.build.allInOne !== null && element.build.falseF !== null) {
            			for (elementBuild : element.build.elementBuild) {		                
							if (elementBuild.page !== null) {
			                	val StringBuilder seqgeneratedCode = new StringBuilder
			                	val StringBuilder nameOfPage = new StringBuilder
								seqgeneratedCode.append(buildHtmlCodeForPage(elementBuild.page, element, null, seqgeneratorHtml))
								nameOfPage.append(seqgeneratorHtml.getNameOfPage(elementBuild.page, element.data, null))
			                	fsa.generateFile(fileName+'/html/' + nameOfPage + ".html", seqgeneratedCode)
			                	fsa.generateFile(fileName+'/txt/' + nameOfPage + ".txt", seqgeneratedCode)
							} else if(elementBuild.loop !== null) { 
								if(elementBuild.loop.forLoop !== null) {
									if(0 <= elementBuild.loop.forLoop.initWithInteger) {
										var p = elementBuild.loop.forLoop.initWithInteger
										for(otherElement : elementBuild.loop.forLoop.otherElement) {
											if(otherElement.page !== null) {
												context1.setVariable(elementBuild.loop.forLoop.increment.name, p)
												 if(elementBuild.loop.forLoop.endWithVariable !== null) {
													for (var i = p; i < seqgeneratorHtml.getLengthForArray(elementBuild.loop.forLoop.endWithVariable.name, element.data); i++) {
			                							val StringBuilder seqgeneratedCode = new StringBuilder
			                							val StringBuilder nameOfPage = new StringBuilder
												        seqgeneratedCode.append(buildHtmlCodeForPage(otherElement.page, element, null, seqgeneratorHtml))
														nameOfPage.append(seqgeneratorHtml.getNameOfPage(otherElement.page, element.data, null))
			                							//fsa.generateFile(fileName+'/html/' + nameOfPage + ".html", seqgeneratedCode)
			                							
														generateDocument(element, seqgeneratedCode.toString, fileName, nameOfPage.toString, seqgeneratorPdf, seqgeneratorDocx, seqgeneratorXlsx, fsa)
								            			
			                							context1.incrementVariable(elementBuild.loop.forLoop.increment.name, 1)
													}										
												} else if(0 <= elementBuild.loop.forLoop.endWithInteger){
													for(var i = p; i<=elementBuild.loop.forLoop.endWithInteger; i++) {
			                							val StringBuilder seqgeneratedCode = new StringBuilder
			                							val StringBuilder nameOfPage = new StringBuilder
														seqgeneratedCode.append(buildHtmlCodeForPage(otherElement.page, element, null, seqgeneratorHtml))
														nameOfPage.append(seqgeneratorHtml.getNameOfPage(otherElement.page, element.data, null))
			                							//fsa.generateFile(fileName+'/html/' + nameOfPage + ".html", seqgeneratedCode)
			                							
														generateDocument(element, seqgeneratedCode.toString, fileName, nameOfPage.toString, seqgeneratorPdf, seqgeneratorDocx, seqgeneratorXlsx, fsa)
								            			
			                							context1.incrementVariable(elementBuild.loop.forLoop.increment.name, 1)
													}							
												} 
											}
										}							
									}
								} else if(elementBuild.loop.withLoop !== null) { 
									if(elementBuild.loop.withLoop.init !== null && elementBuild.loop.withLoop.variable !== null) {
										for(otherElement : elementBuild.loop.withLoop.otherElement) {
											if(otherElement.page !== null) { 
												for(var i=0; i<seqgeneratorHtml.getLengthForArray(elementBuild.loop.withLoop.variable.name, element.data); i++) {
													val StringBuilder seqgeneratedCode = new StringBuilder
													val StringBuilder nameOfPage = new StringBuilder
													var object = seqgeneratorHtml.getObjetInArray(elementBuild.loop.withLoop.variable.name, element.data, i)
													context1.setVariable(elementBuild.loop.withLoop.init.name, object)
													seqgeneratedCode.append(buildHtmlCodeForPage(otherElement.page, element, elementBuild.loop.withLoop.init.name, seqgeneratorHtml))
													nameOfPage.append(seqgeneratorHtml.getNameOfPage(otherElement.page, element.data, object))
		                							//fsa.generateFile(fileName+'/html/' + nameOfPage + ".html", seqgeneratedCode)
		                							
													generateDocument(element, seqgeneratedCode.toString, fileName, nameOfPage.toString, seqgeneratorPdf, seqgeneratorDocx, seqgeneratorXlsx, fsa)
												}
											}
										}
									}
								}
							}
						}
            		} else {
		                val seqgeneratedCode =  seqgeneratorHtml.generate(element, fileName.toString)
		                generateDocument(element, seqgeneratedCode, fileName, fileName, seqgeneratorPdf, seqgeneratorDocx, seqgeneratorXlsx, fsa)
            		}
				}
            }
        }
    }
    
    def void generateDocument(Document document, String seqgeneratedCode, String directoryName, String fileName, PdfFileGenerator seqgeneratorPdf, DocxFileGenerator seqgeneratorDocx, ExcelFileGenerator seqgeneratorXlsx, IFileSystemAccess2 fsa) {
    	if(document.build.extensions !== null) {
        	for(ex : document.build.extensions.extensions) {
        		if(ex.pdf !== null){
					seqgeneratorPdf.generate(seqgeneratedCode.toString, directoryName + '/pdf/' + fileName + ".pdf")
        		}
        		if(ex.doc !== null){
					seqgeneratorDocx.generate(seqgeneratedCode.toString, directoryName + '/word/' + fileName + ".docx")
        		}
        		if(ex.xlsx !== null){
					seqgeneratorXlsx.generate(seqgeneratedCode.toString, directoryName + '/excel/' + fileName + ".xlsx")
        		}
        		if(ex.html !== null){
					fsa.generateFile(fileName + '/html/' + fileName + ".html", seqgeneratedCode.toString)
        		}
        	}
        } else {
			fsa.generateFile(fileName + '/html/' + fileName + ".html", seqgeneratedCode.toString)
			seqgeneratorXlsx.generate(seqgeneratedCode.toString, directoryName + '/excel/' + fileName + ".xlsx")
			seqgeneratorPdf.generate(seqgeneratedCode.toString, directoryName + '/pdf/' + fileName + ".pdf")
			seqgeneratorDocx.generate(seqgeneratedCode.toString, directoryName + '/word/' + fileName + ".docx")
		}
    }
    
    def	buildHtmlCodeForPage(Page page, Document document, String withLoopInitName, HtmlCodeGenerator seqgeneratorHtml) {
    	val seqgeneratorCss = new CssCodeGenerator
    	val StringBuilder cssCode = seqgeneratorCss.generate(document.style)
    	val StringBuilder buildCode = new StringBuilder
    	
    	var Value object = null as Value
    	if(withLoopInitName !== null) {
    		object = context1.getVariable(withLoopInitName) as Value
    		seqgeneratorHtml.buildWithLoopPage(buildCode, page, document, withLoopInitName)
    	} else {
	    	seqgeneratorHtml.buildPage(buildCode, page, document)
    	}
    	
    	val StringBuilder code = new StringBuilder
    	code.append('''
		<!DOCTYPE html>
		<html lang="en">
			<head>
			    <meta charset="UTF-8">
			    <meta name="viewport" content="width=device-width, initial-scale=1.0">
			    <title>''' + seqgeneratorHtml.getNameOfPage(page, document.data, object) + '''</title>
				<style>''' + cssCode + '''</style>
			</head>
			<body>
			    ''' + buildCode + '''
			</body>
		</html>''')
		
		return code 
    }

}

class Context {
    private HashMap<String, Object> variables = new HashMap();

    // Méthode pour définir la valeur d'une variable
    def setVariable(String name, Object value) {  
        variables.put(name, value);
    } 

    // Méthode pour obtenir la valeur d'une variable
    def getVariable(String name) {
        return variables.get(name);
    }

    // Méthode pour supprimer une variable
    def removeVariable(String name) {
        variables.remove(name)
    }

    // Méthode pour incrémenter la valeur d'une variable
    def incrementVariable(String name, int amount) {
        val current = getVariable(name)
        if (current instanceof Integer) {
            val incremented = current + amount
            setVariable(name, incremented)
        } else {
            throw new IllegalArgumentException("Variable '" + name + "' is not a number and cannot be incremented.")
        }
    }
    
    // Méthode pour ajouter un élément à un tableau dans la HashMap
    def addToArray(String name, Number value) {
        val array = variables.getOrDefault(name, new ArrayList<Number>()) as ArrayList<Number>
        array.add(value)
        variables.put(name, array)
    }

    // Méthode spécifique pour récupérer un tableau associé à une chaîne
    def getArray(String name) {
        return variables.getOrDefault(name, new ArrayList<Object>()) as ArrayList<Object>;
    }

    // Méthode spécifique pour récupérer le premier élément d'un tableau associé à une chaîne
    def getFirstValueInArray(String name) {
        val ArrayList<Object> array = getArray(name);
        return array.get(0);
    }

    // Méthode pour ajouter un élément à un tableau spécifique dans la HashMap
    def addToClassVariable(String name, Object element) {
        val list = variables.getOrDefault(name, new ArrayList<Object>()) as ArrayList<Object>
        list.add(element)
        variables.put(name, list)
    }

    // Méthode pour ajouter des valeurs aux tableaux de toutes les classes définies dans classDC
    def addToAllClassVariables(String classDC, Object element) {
        for (String className : classDC.split(" ")) {
        	if(className.replace(" ", "").length() != 0) {
	            addToClassVariable(className, element)
            }
        }
    }
    
    // Méthode pour calculer la somme des éléments d'un tableau Float
	def double sumArray(String name) {
	    val List<Object> objectList = getArray(name) as List<Object>;
	    val List<Double> doubleList = objectList.map[ obj | obj as Double ];  // Convertit chaque élément en Float
	    return doubleList.stream().mapToDouble([ floatElement | floatElement.doubleValue() ]).sum();
	}
	
	// Méthode pour calculer le produit des éléments d'un tableau Float
	def double productArray(String name) {
	    val List<Object> objectList = getArray(name) as List<Object>;
	    val List<Double> doubleList = objectList.map[ obj | obj as Double ];  // Convertit chaque élément en Float
	    return doubleList.stream().reduce(1.0, [Double a, Double b | a * b]);  // Utilisation de 1.0f comme valeur initiale
	}

    // Nouvelle méthode pour effectuer la division
    def double divideArraysFirstElement(String name1, String name2) {
        val ArrayList<Object> array1 = getArray(name1);
        val ArrayList<Object> array2 = getArray(name2);

        // Liste pour stocker les résultats des divisions
        val ArrayList<Double> result = new ArrayList<Double>();

        // Assurer que les deux listes ont la même taille et non vides
        if (array1.size() != array2.size() || array1.isEmpty()) {
            throw new IllegalArgumentException("Les tableaux doivent avoir la même taille et ne pas être vides.");
        }

        // Effectuer la division
        for (var i = 0; i < array1.size(); i++) {
            // Conversion en Double
            val Double value1 = (array1.get(i) instanceof Number) ? (array1.get(i) as Number).doubleValue() : throw new IllegalArgumentException("Les éléments doivent être des nombres.");
            val Double value2 = (array2.get(i) instanceof Number) ? (array2.get(i) as Number).doubleValue() : throw new IllegalArgumentException("Les éléments doivent être des nombres.");
            
            if (value2 == 0) {
                throw new ArithmeticException("Division par zéro à l'indice " + i);
            }
            result.add(value1 / value2);
        }

        // Renvoyer le premier élément du tableau des résultats
        //return result.get(0);
        return Math.round(result.get(0) * 100) / 100.0;
    }

    // Méthode d'aide pour convertir un objet en Double
    def Double toDouble(Object obj) {
        if (!(obj instanceof Number)) {
            throw new IllegalArgumentException("Les éléments doivent être des nombres.");
        }
        return (obj as Number).doubleValue();
    }

    // Méthode d'aide pour formater un Double à deux chiffres après la virgule
    def double formatDouble(Double value) {
        return Math.round(value * 100) / 100.0;
    }

    // Méthode pour effacer toutes les variables
    def clearVariables() {
        variables.clear();
    }
}
