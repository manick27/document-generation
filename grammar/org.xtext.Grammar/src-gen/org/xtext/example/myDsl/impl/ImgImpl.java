/**
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.myDsl.ArrayC;
import org.xtext.example.myDsl.ClassD;
import org.xtext.example.myDsl.Img;
import org.xtext.example.myDsl.MyDslPackage;
import org.xtext.example.myDsl.ObjectC;
import org.xtext.example.myDsl.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Img</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.myDsl.impl.ImgImpl#getClassD <em>Class D</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.ImgImpl#getString <em>String</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.ImgImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.ImgImpl#getObjectC <em>Object C</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.ImgImpl#getArrayC <em>Array C</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.ImgImpl#getStringAlt <em>String Alt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImgImpl extends MinimalEObjectImpl.Container implements Img
{
  /**
   * The cached value of the '{@link #getClassD() <em>Class D</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassD()
   * @generated
   * @ordered
   */
  protected ClassD classD;

  /**
   * The default value of the '{@link #getString() <em>String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getString()
   * @generated
   * @ordered
   */
  protected static final String STRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getString() <em>String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getString()
   * @generated
   * @ordered
   */
  protected String string = STRING_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The cached value of the '{@link #getObjectC() <em>Object C</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectC()
   * @generated
   * @ordered
   */
  protected ObjectC objectC;

  /**
   * The cached value of the '{@link #getArrayC() <em>Array C</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArrayC()
   * @generated
   * @ordered
   */
  protected ArrayC arrayC;

  /**
   * The default value of the '{@link #getStringAlt() <em>String Alt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringAlt()
   * @generated
   * @ordered
   */
  protected static final String STRING_ALT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStringAlt() <em>String Alt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringAlt()
   * @generated
   * @ordered
   */
  protected String stringAlt = STRING_ALT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImgImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.IMG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassD getClassD()
  {
    return classD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassD(ClassD newClassD, NotificationChain msgs)
  {
    ClassD oldClassD = classD;
    classD = newClassD;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__CLASS_D, oldClassD, newClassD);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClassD(ClassD newClassD)
  {
    if (newClassD != classD)
    {
      NotificationChain msgs = null;
      if (classD != null)
        msgs = ((InternalEObject)classD).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__CLASS_D, null, msgs);
      if (newClassD != null)
        msgs = ((InternalEObject)newClassD).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__CLASS_D, null, msgs);
      msgs = basicSetClassD(newClassD, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__CLASS_D, newClassD, newClassD));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getString()
  {
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setString(String newString)
  {
    String oldString = string;
    string = newString;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__STRING, oldString, string));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(Variable newVariable, NotificationChain msgs)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectC getObjectC()
  {
    return objectC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObjectC(ObjectC newObjectC, NotificationChain msgs)
  {
    ObjectC oldObjectC = objectC;
    objectC = newObjectC;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__OBJECT_C, oldObjectC, newObjectC);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObjectC(ObjectC newObjectC)
  {
    if (newObjectC != objectC)
    {
      NotificationChain msgs = null;
      if (objectC != null)
        msgs = ((InternalEObject)objectC).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__OBJECT_C, null, msgs);
      if (newObjectC != null)
        msgs = ((InternalEObject)newObjectC).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__OBJECT_C, null, msgs);
      msgs = basicSetObjectC(newObjectC, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__OBJECT_C, newObjectC, newObjectC));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayC getArrayC()
  {
    return arrayC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArrayC(ArrayC newArrayC, NotificationChain msgs)
  {
    ArrayC oldArrayC = arrayC;
    arrayC = newArrayC;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__ARRAY_C, oldArrayC, newArrayC);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArrayC(ArrayC newArrayC)
  {
    if (newArrayC != arrayC)
    {
      NotificationChain msgs = null;
      if (arrayC != null)
        msgs = ((InternalEObject)arrayC).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__ARRAY_C, null, msgs);
      if (newArrayC != null)
        msgs = ((InternalEObject)newArrayC).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMG__ARRAY_C, null, msgs);
      msgs = basicSetArrayC(newArrayC, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__ARRAY_C, newArrayC, newArrayC));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStringAlt()
  {
    return stringAlt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStringAlt(String newStringAlt)
  {
    String oldStringAlt = stringAlt;
    stringAlt = newStringAlt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMG__STRING_ALT, oldStringAlt, stringAlt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.IMG__CLASS_D:
        return basicSetClassD(null, msgs);
      case MyDslPackage.IMG__VARIABLE:
        return basicSetVariable(null, msgs);
      case MyDslPackage.IMG__OBJECT_C:
        return basicSetObjectC(null, msgs);
      case MyDslPackage.IMG__ARRAY_C:
        return basicSetArrayC(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.IMG__CLASS_D:
        return getClassD();
      case MyDslPackage.IMG__STRING:
        return getString();
      case MyDslPackage.IMG__VARIABLE:
        return getVariable();
      case MyDslPackage.IMG__OBJECT_C:
        return getObjectC();
      case MyDslPackage.IMG__ARRAY_C:
        return getArrayC();
      case MyDslPackage.IMG__STRING_ALT:
        return getStringAlt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.IMG__CLASS_D:
        setClassD((ClassD)newValue);
        return;
      case MyDslPackage.IMG__STRING:
        setString((String)newValue);
        return;
      case MyDslPackage.IMG__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case MyDslPackage.IMG__OBJECT_C:
        setObjectC((ObjectC)newValue);
        return;
      case MyDslPackage.IMG__ARRAY_C:
        setArrayC((ArrayC)newValue);
        return;
      case MyDslPackage.IMG__STRING_ALT:
        setStringAlt((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IMG__CLASS_D:
        setClassD((ClassD)null);
        return;
      case MyDslPackage.IMG__STRING:
        setString(STRING_EDEFAULT);
        return;
      case MyDslPackage.IMG__VARIABLE:
        setVariable((Variable)null);
        return;
      case MyDslPackage.IMG__OBJECT_C:
        setObjectC((ObjectC)null);
        return;
      case MyDslPackage.IMG__ARRAY_C:
        setArrayC((ArrayC)null);
        return;
      case MyDslPackage.IMG__STRING_ALT:
        setStringAlt(STRING_ALT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IMG__CLASS_D:
        return classD != null;
      case MyDslPackage.IMG__STRING:
        return STRING_EDEFAULT == null ? string != null : !STRING_EDEFAULT.equals(string);
      case MyDslPackage.IMG__VARIABLE:
        return variable != null;
      case MyDslPackage.IMG__OBJECT_C:
        return objectC != null;
      case MyDslPackage.IMG__ARRAY_C:
        return arrayC != null;
      case MyDslPackage.IMG__STRING_ALT:
        return STRING_ALT_EDEFAULT == null ? stringAlt != null : !STRING_ALT_EDEFAULT.equals(stringAlt);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (string: ");
    result.append(string);
    result.append(", stringAlt: ");
    result.append(stringAlt);
    result.append(')');
    return result.toString();
  }

} //ImgImpl
