/**
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.myDsl.Argument1;
import org.xtext.example.myDsl.Argument2;
import org.xtext.example.myDsl.Array;
import org.xtext.example.myDsl.ArrayC;
import org.xtext.example.myDsl.BigTitle;
import org.xtext.example.myDsl.Build;
import org.xtext.example.myDsl.ClassD;
import org.xtext.example.myDsl.ClassSelector;
import org.xtext.example.myDsl.ClassVariable;
import org.xtext.example.myDsl.Col;
import org.xtext.example.myDsl.Colspan;
import org.xtext.example.myDsl.Condition1;
import org.xtext.example.myDsl.Conditional;
import org.xtext.example.myDsl.Css;
import org.xtext.example.myDsl.CssValue;
import org.xtext.example.myDsl.Data;
import org.xtext.example.myDsl.Declaration;
import org.xtext.example.myDsl.DivFunction;
import org.xtext.example.myDsl.Document;
import org.xtext.example.myDsl.ElementBuild;
import org.xtext.example.myDsl.ElementPage;
import org.xtext.example.myDsl.ElementRow;
import org.xtext.example.myDsl.ElseCondition;
import org.xtext.example.myDsl.For;
import org.xtext.example.myDsl.Function;
import org.xtext.example.myDsl.Fusion;
import org.xtext.example.myDsl.IDSelector;
import org.xtext.example.myDsl.IfCondition;
import org.xtext.example.myDsl.Img;
import org.xtext.example.myDsl.KeyValue;
import org.xtext.example.myDsl.Loop;
import org.xtext.example.myDsl.Model;
import org.xtext.example.myDsl.MyDslFactory;
import org.xtext.example.myDsl.MyDslPackage;
import org.xtext.example.myDsl.NestedObject;
import org.xtext.example.myDsl.ObjectC;
import org.xtext.example.myDsl.OtherElement;
import org.xtext.example.myDsl.Page;
import org.xtext.example.myDsl.Part;
import org.xtext.example.myDsl.Position;
import org.xtext.example.myDsl.ProdFunction;
import org.xtext.example.myDsl.Row;
import org.xtext.example.myDsl.Rowspan;
import org.xtext.example.myDsl.Rule;
import org.xtext.example.myDsl.Selector;
import org.xtext.example.myDsl.Style;
import org.xtext.example.myDsl.SubSubTitle;
import org.xtext.example.myDsl.SubTitle;
import org.xtext.example.myDsl.SumFunction;
import org.xtext.example.myDsl.SuperVariable;
import org.xtext.example.myDsl.Title;
import org.xtext.example.myDsl.TypeSelector;
import org.xtext.example.myDsl.Value;
import org.xtext.example.myDsl.Variable;
import org.xtext.example.myDsl.VariableD;
import org.xtext.example.myDsl.With;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.MODEL: return createModel();
      case MyDslPackage.DOCUMENT: return createDocument();
      case MyDslPackage.DATA: return createData();
      case MyDslPackage.KEY_VALUE: return createKeyValue();
      case MyDslPackage.VALUE: return createValue();
      case MyDslPackage.ARRAY: return createArray();
      case MyDslPackage.NESTED_OBJECT: return createNestedObject();
      case MyDslPackage.BUILD: return createBuild();
      case MyDslPackage.ELEMENT_BUILD: return createElementBuild();
      case MyDslPackage.VARIABLE: return createVariable();
      case MyDslPackage.SUPER_VARIABLE: return createSuperVariable();
      case MyDslPackage.VARIABLE_D: return createVariableD();
      case MyDslPackage.PAGE: return createPage();
      case MyDslPackage.ELEMENT_PAGE: return createElementPage();
      case MyDslPackage.TITLE: return createTitle();
      case MyDslPackage.BIG_TITLE: return createBigTitle();
      case MyDslPackage.SUB_TITLE: return createSubTitle();
      case MyDslPackage.SUB_SUB_TITLE: return createSubSubTitle();
      case MyDslPackage.ROW: return createRow();
      case MyDslPackage.ELEMENT_ROW: return createElementRow();
      case MyDslPackage.COL: return createCol();
      case MyDslPackage.ARRAY_C: return createArrayC();
      case MyDslPackage.POSITION: return createPosition();
      case MyDslPackage.OBJECT_C: return createObjectC();
      case MyDslPackage.IMG: return createImg();
      case MyDslPackage.CLASS_D: return createClassD();
      case MyDslPackage.FUSION: return createFusion();
      case MyDslPackage.COLSPAN: return createColspan();
      case MyDslPackage.ROWSPAN: return createRowspan();
      case MyDslPackage.FUNCTION: return createFunction();
      case MyDslPackage.SUM_FUNCTION: return createSumFunction();
      case MyDslPackage.PROD_FUNCTION: return createProdFunction();
      case MyDslPackage.DIV_FUNCTION: return createDivFunction();
      case MyDslPackage.ARGUMENT1: return createArgument1();
      case MyDslPackage.ARGUMENT2: return createArgument2();
      case MyDslPackage.CLASS_VARIABLE: return createClassVariable();
      case MyDslPackage.CONDITIONAL: return createConditional();
      case MyDslPackage.IF_CONDITION: return createIfCondition();
      case MyDslPackage.ELSE_CONDITION: return createElseCondition();
      case MyDslPackage.CONDITION1: return createCondition1();
      case MyDslPackage.PART: return createPart();
      case MyDslPackage.LOOP: return createLoop();
      case MyDslPackage.WITH: return createWith();
      case MyDslPackage.FOR: return createFor();
      case MyDslPackage.OTHER_ELEMENT: return createOtherElement();
      case MyDslPackage.STYLE: return createStyle();
      case MyDslPackage.CSS: return createCss();
      case MyDslPackage.RULE: return createRule();
      case MyDslPackage.SELECTOR: return createSelector();
      case MyDslPackage.ID_SELECTOR: return createIDSelector();
      case MyDslPackage.CLASS_SELECTOR: return createClassSelector();
      case MyDslPackage.TYPE_SELECTOR: return createTypeSelector();
      case MyDslPackage.DECLARATION: return createDeclaration();
      case MyDslPackage.CSS_VALUE: return createCssValue();
      case MyDslPackage.FLOAT: return createFloat();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Document createDocument()
  {
    DocumentImpl document = new DocumentImpl();
    return document;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Data createData()
  {
    DataImpl data = new DataImpl();
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyValue createKeyValue()
  {
    KeyValueImpl keyValue = new KeyValueImpl();
    return keyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Array createArray()
  {
    ArrayImpl array = new ArrayImpl();
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NestedObject createNestedObject()
  {
    NestedObjectImpl nestedObject = new NestedObjectImpl();
    return nestedObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Build createBuild()
  {
    BuildImpl build = new BuildImpl();
    return build;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementBuild createElementBuild()
  {
    ElementBuildImpl elementBuild = new ElementBuildImpl();
    return elementBuild;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SuperVariable createSuperVariable()
  {
    SuperVariableImpl superVariable = new SuperVariableImpl();
    return superVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableD createVariableD()
  {
    VariableDImpl variableD = new VariableDImpl();
    return variableD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Page createPage()
  {
    PageImpl page = new PageImpl();
    return page;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementPage createElementPage()
  {
    ElementPageImpl elementPage = new ElementPageImpl();
    return elementPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Title createTitle()
  {
    TitleImpl title = new TitleImpl();
    return title;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigTitle createBigTitle()
  {
    BigTitleImpl bigTitle = new BigTitleImpl();
    return bigTitle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubTitle createSubTitle()
  {
    SubTitleImpl subTitle = new SubTitleImpl();
    return subTitle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubSubTitle createSubSubTitle()
  {
    SubSubTitleImpl subSubTitle = new SubSubTitleImpl();
    return subSubTitle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Row createRow()
  {
    RowImpl row = new RowImpl();
    return row;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementRow createElementRow()
  {
    ElementRowImpl elementRow = new ElementRowImpl();
    return elementRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Col createCol()
  {
    ColImpl col = new ColImpl();
    return col;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayC createArrayC()
  {
    ArrayCImpl arrayC = new ArrayCImpl();
    return arrayC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Position createPosition()
  {
    PositionImpl position = new PositionImpl();
    return position;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectC createObjectC()
  {
    ObjectCImpl objectC = new ObjectCImpl();
    return objectC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Img createImg()
  {
    ImgImpl img = new ImgImpl();
    return img;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassD createClassD()
  {
    ClassDImpl classD = new ClassDImpl();
    return classD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Fusion createFusion()
  {
    FusionImpl fusion = new FusionImpl();
    return fusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colspan createColspan()
  {
    ColspanImpl colspan = new ColspanImpl();
    return colspan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rowspan createRowspan()
  {
    RowspanImpl rowspan = new RowspanImpl();
    return rowspan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SumFunction createSumFunction()
  {
    SumFunctionImpl sumFunction = new SumFunctionImpl();
    return sumFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProdFunction createProdFunction()
  {
    ProdFunctionImpl prodFunction = new ProdFunctionImpl();
    return prodFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DivFunction createDivFunction()
  {
    DivFunctionImpl divFunction = new DivFunctionImpl();
    return divFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Argument1 createArgument1()
  {
    Argument1Impl argument1 = new Argument1Impl();
    return argument1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Argument2 createArgument2()
  {
    Argument2Impl argument2 = new Argument2Impl();
    return argument2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassVariable createClassVariable()
  {
    ClassVariableImpl classVariable = new ClassVariableImpl();
    return classVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional createConditional()
  {
    ConditionalImpl conditional = new ConditionalImpl();
    return conditional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfCondition createIfCondition()
  {
    IfConditionImpl ifCondition = new IfConditionImpl();
    return ifCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseCondition createElseCondition()
  {
    ElseConditionImpl elseCondition = new ElseConditionImpl();
    return elseCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition1 createCondition1()
  {
    Condition1Impl condition1 = new Condition1Impl();
    return condition1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Part createPart()
  {
    PartImpl part = new PartImpl();
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public With createWith()
  {
    WithImpl with = new WithImpl();
    return with;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public For createFor()
  {
    ForImpl for_ = new ForImpl();
    return for_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OtherElement createOtherElement()
  {
    OtherElementImpl otherElement = new OtherElementImpl();
    return otherElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Style createStyle()
  {
    StyleImpl style = new StyleImpl();
    return style;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Css createCss()
  {
    CssImpl css = new CssImpl();
    return css;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IDSelector createIDSelector()
  {
    IDSelectorImpl idSelector = new IDSelectorImpl();
    return idSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassSelector createClassSelector()
  {
    ClassSelectorImpl classSelector = new ClassSelectorImpl();
    return classSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeSelector createTypeSelector()
  {
    TypeSelectorImpl typeSelector = new TypeSelectorImpl();
    return typeSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CssValue createCssValue()
  {
    CssValueImpl cssValue = new CssValueImpl();
    return cssValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.myDsl.Float createFloat()
  {
    FloatImpl float_ = new FloatImpl();
    return float_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
