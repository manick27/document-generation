/**
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.myDsl.ClassSelector;
import org.xtext.example.myDsl.IDSelector;
import org.xtext.example.myDsl.MyDslPackage;
import org.xtext.example.myDsl.Selector;
import org.xtext.example.myDsl.TypeSelector;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.myDsl.impl.SelectorImpl#getIdSelector <em>Id Selector</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.SelectorImpl#getClassSelector <em>Class Selector</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.SelectorImpl#getTypeSelector <em>Type Selector</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectorImpl extends MinimalEObjectImpl.Container implements Selector
{
  /**
   * The cached value of the '{@link #getIdSelector() <em>Id Selector</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdSelector()
   * @generated
   * @ordered
   */
  protected IDSelector idSelector;

  /**
   * The cached value of the '{@link #getClassSelector() <em>Class Selector</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassSelector()
   * @generated
   * @ordered
   */
  protected ClassSelector classSelector;

  /**
   * The cached value of the '{@link #getTypeSelector() <em>Type Selector</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeSelector()
   * @generated
   * @ordered
   */
  protected TypeSelector typeSelector;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SELECTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IDSelector getIdSelector()
  {
    return idSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIdSelector(IDSelector newIdSelector, NotificationChain msgs)
  {
    IDSelector oldIdSelector = idSelector;
    idSelector = newIdSelector;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTOR__ID_SELECTOR, oldIdSelector, newIdSelector);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIdSelector(IDSelector newIdSelector)
  {
    if (newIdSelector != idSelector)
    {
      NotificationChain msgs = null;
      if (idSelector != null)
        msgs = ((InternalEObject)idSelector).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTOR__ID_SELECTOR, null, msgs);
      if (newIdSelector != null)
        msgs = ((InternalEObject)newIdSelector).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTOR__ID_SELECTOR, null, msgs);
      msgs = basicSetIdSelector(newIdSelector, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTOR__ID_SELECTOR, newIdSelector, newIdSelector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassSelector getClassSelector()
  {
    return classSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassSelector(ClassSelector newClassSelector, NotificationChain msgs)
  {
    ClassSelector oldClassSelector = classSelector;
    classSelector = newClassSelector;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTOR__CLASS_SELECTOR, oldClassSelector, newClassSelector);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClassSelector(ClassSelector newClassSelector)
  {
    if (newClassSelector != classSelector)
    {
      NotificationChain msgs = null;
      if (classSelector != null)
        msgs = ((InternalEObject)classSelector).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTOR__CLASS_SELECTOR, null, msgs);
      if (newClassSelector != null)
        msgs = ((InternalEObject)newClassSelector).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTOR__CLASS_SELECTOR, null, msgs);
      msgs = basicSetClassSelector(newClassSelector, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTOR__CLASS_SELECTOR, newClassSelector, newClassSelector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeSelector getTypeSelector()
  {
    return typeSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeSelector(TypeSelector newTypeSelector, NotificationChain msgs)
  {
    TypeSelector oldTypeSelector = typeSelector;
    typeSelector = newTypeSelector;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTOR__TYPE_SELECTOR, oldTypeSelector, newTypeSelector);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeSelector(TypeSelector newTypeSelector)
  {
    if (newTypeSelector != typeSelector)
    {
      NotificationChain msgs = null;
      if (typeSelector != null)
        msgs = ((InternalEObject)typeSelector).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTOR__TYPE_SELECTOR, null, msgs);
      if (newTypeSelector != null)
        msgs = ((InternalEObject)newTypeSelector).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTOR__TYPE_SELECTOR, null, msgs);
      msgs = basicSetTypeSelector(newTypeSelector, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTOR__TYPE_SELECTOR, newTypeSelector, newTypeSelector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTOR__ID_SELECTOR:
        return basicSetIdSelector(null, msgs);
      case MyDslPackage.SELECTOR__CLASS_SELECTOR:
        return basicSetClassSelector(null, msgs);
      case MyDslPackage.SELECTOR__TYPE_SELECTOR:
        return basicSetTypeSelector(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTOR__ID_SELECTOR:
        return getIdSelector();
      case MyDslPackage.SELECTOR__CLASS_SELECTOR:
        return getClassSelector();
      case MyDslPackage.SELECTOR__TYPE_SELECTOR:
        return getTypeSelector();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTOR__ID_SELECTOR:
        setIdSelector((IDSelector)newValue);
        return;
      case MyDslPackage.SELECTOR__CLASS_SELECTOR:
        setClassSelector((ClassSelector)newValue);
        return;
      case MyDslPackage.SELECTOR__TYPE_SELECTOR:
        setTypeSelector((TypeSelector)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTOR__ID_SELECTOR:
        setIdSelector((IDSelector)null);
        return;
      case MyDslPackage.SELECTOR__CLASS_SELECTOR:
        setClassSelector((ClassSelector)null);
        return;
      case MyDslPackage.SELECTOR__TYPE_SELECTOR:
        setTypeSelector((TypeSelector)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTOR__ID_SELECTOR:
        return idSelector != null;
      case MyDslPackage.SELECTOR__CLASS_SELECTOR:
        return classSelector != null;
      case MyDslPackage.SELECTOR__TYPE_SELECTOR:
        return typeSelector != null;
    }
    return super.eIsSet(featureID);
  }

} //SelectorImpl
