/**
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.myDsl.Argument1;
import org.xtext.example.myDsl.Argument2;
import org.xtext.example.myDsl.MyDslPackage;
import org.xtext.example.myDsl.ProdFunction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Prod Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.myDsl.impl.ProdFunctionImpl#getArgument1 <em>Argument1</em>}</li>
 *   <li>{@link org.xtext.example.myDsl.impl.ProdFunctionImpl#getArgument2 <em>Argument2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProdFunctionImpl extends MinimalEObjectImpl.Container implements ProdFunction
{
  /**
   * The cached value of the '{@link #getArgument1() <em>Argument1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgument1()
   * @generated
   * @ordered
   */
  protected EList<Argument1> argument1;

  /**
   * The cached value of the '{@link #getArgument2() <em>Argument2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgument2()
   * @generated
   * @ordered
   */
  protected EList<Argument2> argument2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProdFunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.PROD_FUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Argument1> getArgument1()
  {
    if (argument1 == null)
    {
      argument1 = new EObjectContainmentEList<Argument1>(Argument1.class, this, MyDslPackage.PROD_FUNCTION__ARGUMENT1);
    }
    return argument1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Argument2> getArgument2()
  {
    if (argument2 == null)
    {
      argument2 = new EObjectContainmentEList<Argument2>(Argument2.class, this, MyDslPackage.PROD_FUNCTION__ARGUMENT2);
    }
    return argument2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.PROD_FUNCTION__ARGUMENT1:
        return ((InternalEList<?>)getArgument1()).basicRemove(otherEnd, msgs);
      case MyDslPackage.PROD_FUNCTION__ARGUMENT2:
        return ((InternalEList<?>)getArgument2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.PROD_FUNCTION__ARGUMENT1:
        return getArgument1();
      case MyDslPackage.PROD_FUNCTION__ARGUMENT2:
        return getArgument2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.PROD_FUNCTION__ARGUMENT1:
        getArgument1().clear();
        getArgument1().addAll((Collection<? extends Argument1>)newValue);
        return;
      case MyDslPackage.PROD_FUNCTION__ARGUMENT2:
        getArgument2().clear();
        getArgument2().addAll((Collection<? extends Argument2>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PROD_FUNCTION__ARGUMENT1:
        getArgument1().clear();
        return;
      case MyDslPackage.PROD_FUNCTION__ARGUMENT2:
        getArgument2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PROD_FUNCTION__ARGUMENT1:
        return argument1 != null && !argument1.isEmpty();
      case MyDslPackage.PROD_FUNCTION__ARGUMENT2:
        return argument2 != null && !argument2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ProdFunctionImpl
