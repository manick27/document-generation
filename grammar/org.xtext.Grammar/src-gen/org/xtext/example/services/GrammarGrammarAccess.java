/*
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GrammarGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Model");
		private final Assignment cDocumentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDocumentDocumentParserRuleCall_0 = (RuleCall)cDocumentAssignment.eContents().get(0);
		
		//Model:
		//    document+=Document;
		@Override public ParserRule getRule() { return rule; }
		
		//document+=Document
		public Assignment getDocumentAssignment() { return cDocumentAssignment; }
		
		//Document
		public RuleCall getDocumentDocumentParserRuleCall_0() { return cDocumentDocumentParserRuleCall_0; }
	}
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataDataParserRuleCall_0_0 = (RuleCall)cDataAssignment_0.eContents().get(0);
		private final Assignment cBuildAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBuildBuildParserRuleCall_1_0 = (RuleCall)cBuildAssignment_1.eContents().get(0);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleStyleParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		
		//Document:
		//    (data=Data)? build=Build (style=Style)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(data=Data)? build=Build (style=Style)?
		public Group getGroup() { return cGroup; }
		
		//(data=Data)?
		public Assignment getDataAssignment_0() { return cDataAssignment_0; }
		
		//Data
		public RuleCall getDataDataParserRuleCall_0_0() { return cDataDataParserRuleCall_0_0; }
		
		//build=Build
		public Assignment getBuildAssignment_1() { return cBuildAssignment_1; }
		
		//Build
		public RuleCall getBuildBuildParserRuleCall_1_0() { return cBuildBuildParserRuleCall_1_0; }
		
		//(style=Style)?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }
		
		//Style
		public RuleCall getStyleStyleParserRuleCall_2_0() { return cStyleStyleParserRuleCall_2_0; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cKeyValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyValueKeyValueParserRuleCall_2_0_0 = (RuleCall)cKeyValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cKeyValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cKeyValueKeyValueParserRuleCall_2_1_1_0 = (RuleCall)cKeyValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Section de définitions des données du document
		//Data:
		//    'data' '{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'data' '{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(keyValue+=KeyValue (',' keyValue+=KeyValue)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//keyValue+=KeyValue
		public Assignment getKeyValueAssignment_2_0() { return cKeyValueAssignment_2_0; }
		
		//KeyValue
		public RuleCall getKeyValueKeyValueParserRuleCall_2_0_0() { return cKeyValueKeyValueParserRuleCall_2_0_0; }
		
		//(',' keyValue+=KeyValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//keyValue+=KeyValue
		public Assignment getKeyValueAssignment_2_1_1() { return cKeyValueAssignment_2_1_1; }
		
		//KeyValue
		public RuleCall getKeyValueKeyValueParserRuleCall_2_1_1_0() { return cKeyValueKeyValueParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class KeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.KeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//KeyValue:
		//    string=STRING ':' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//string=STRING ':' value=Value
		public Group getGroup() { return cGroup; }
		
		//string=STRING
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_0() { return cStringSTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final Assignment cIntegerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerINTTerminalRuleCall_1_0 = (RuleCall)cIntegerAssignment_1.eContents().get(0);
		private final Assignment cFloatValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFloatValueFloatParserRuleCall_2_0 = (RuleCall)cFloatValueAssignment_2.eContents().get(0);
		private final Assignment cTrueVAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTrueVTRUEParserRuleCall_3_0 = (RuleCall)cTrueVAssignment_3.eContents().get(0);
		private final Assignment cFalseVAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFalseVFALSEParserRuleCall_4_0 = (RuleCall)cFalseVAssignment_4.eContents().get(0);
		private final Assignment cArrayAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cArrayArrayParserRuleCall_5_0 = (RuleCall)cArrayAssignment_5.eContents().get(0);
		private final Assignment cNestedObjectAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cNestedObjectNestedObjectParserRuleCall_6_0 = (RuleCall)cNestedObjectAssignment_6.eContents().get(0);
		private final Assignment cVariableAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cVariableVariableParserRuleCall_7_0 = (RuleCall)cVariableAssignment_7.eContents().get(0);
		
		//Value:
		//    string=STRING | integer=INT | floatValue=Float | trueV=TRUE | falseV=FALSE /*| id=ID */| array=Array | nestedObject=NestedObject | variable=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//string=STRING | integer=INT | floatValue=Float | trueV=TRUE | falseV=FALSE /*| id=ID */| array=Array | nestedObject=NestedObject | variable=Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string=STRING
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_0() { return cStringSTRINGTerminalRuleCall_0_0; }
		
		//integer=INT
		public Assignment getIntegerAssignment_1() { return cIntegerAssignment_1; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_1_0() { return cIntegerINTTerminalRuleCall_1_0; }
		
		//floatValue=Float
		public Assignment getFloatValueAssignment_2() { return cFloatValueAssignment_2; }
		
		//Float
		public RuleCall getFloatValueFloatParserRuleCall_2_0() { return cFloatValueFloatParserRuleCall_2_0; }
		
		//trueV=TRUE
		public Assignment getTrueVAssignment_3() { return cTrueVAssignment_3; }
		
		//TRUE
		public RuleCall getTrueVTRUEParserRuleCall_3_0() { return cTrueVTRUEParserRuleCall_3_0; }
		
		//falseV=FALSE
		public Assignment getFalseVAssignment_4() { return cFalseVAssignment_4; }
		
		//FALSE
		public RuleCall getFalseVFALSEParserRuleCall_4_0() { return cFalseVFALSEParserRuleCall_4_0; }
		
		//array=Array
		public Assignment getArrayAssignment_5() { return cArrayAssignment_5; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_5_0() { return cArrayArrayParserRuleCall_5_0; }
		
		//nestedObject=NestedObject
		public Assignment getNestedObjectAssignment_6() { return cNestedObjectAssignment_6; }
		
		//NestedObject
		public RuleCall getNestedObjectNestedObjectParserRuleCall_6_0() { return cNestedObjectNestedObjectParserRuleCall_6_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_7() { return cVariableAssignment_7; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_7_0() { return cVariableVariableParserRuleCall_7_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_1_0_0 = (RuleCall)cValuesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Array:
		//    '[' (values+=Value (',' values+=Value)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (values+=Value (',' values+=Value)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(values+=Value (',' values+=Value)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_0() { return cValuesAssignment_1_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_0_0() { return cValuesValueParserRuleCall_1_0_0; }
		
		//(',' values+=Value)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_1_1() { return cValuesAssignment_1_1_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_1_1_0() { return cValuesValueParserRuleCall_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class NestedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.NestedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cKeyValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cKeyValueKeyValueParserRuleCall_1_0_0 = (RuleCall)cKeyValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cKeyValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cKeyValueKeyValueParserRuleCall_1_1_1_0 = (RuleCall)cKeyValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NestedObject:
		//    '{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(keyValue+=KeyValue (',' keyValue+=KeyValue)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//keyValue+=KeyValue
		public Assignment getKeyValueAssignment_1_0() { return cKeyValueAssignment_1_0; }
		
		//KeyValue
		public RuleCall getKeyValueKeyValueParserRuleCall_1_0_0() { return cKeyValueKeyValueParserRuleCall_1_0_0; }
		
		//(',' keyValue+=KeyValue)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//keyValue+=KeyValue
		public Assignment getKeyValueAssignment_1_1_1() { return cKeyValueAssignment_1_1_1; }
		
		//KeyValue
		public RuleCall getKeyValueKeyValueParserRuleCall_1_1_1_0() { return cKeyValueKeyValueParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class BuildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Build");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAllInOneAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cAllInOneAllInOneKeyword_2_0_0 = (Keyword)cAllInOneAssignment_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cTrueVAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cTrueVTRUEParserRuleCall_2_2_0_0 = (RuleCall)cTrueVAssignment_2_2_0.eContents().get(0);
		private final Assignment cFalseFAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cFalseFFALSEParserRuleCall_2_2_1_0 = (RuleCall)cFalseFAssignment_2_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementBuildAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementBuildElementBuildParserRuleCall_4_0 = (RuleCall)cElementBuildAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Section de construction du document
		//Build:
		//    'document' variable=Variable (allInOne = 'allInOne' '=' (trueV=TRUE | falseF=FALSE)) '{'
		//        (elementBuild+=ElementBuild)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'document' variable=Variable (allInOne = 'allInOne' '=' (trueV=TRUE | falseF=FALSE)) '{'
		//    (elementBuild+=ElementBuild)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'document'
		public Keyword getDocumentKeyword_0() { return cDocumentKeyword_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//(allInOne = 'allInOne' '=' (trueV=TRUE | falseF=FALSE))
		public Group getGroup_2() { return cGroup_2; }
		
		//allInOne = 'allInOne'
		public Assignment getAllInOneAssignment_2_0() { return cAllInOneAssignment_2_0; }
		
		//'allInOne'
		public Keyword getAllInOneAllInOneKeyword_2_0_0() { return cAllInOneAllInOneKeyword_2_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//(trueV=TRUE | falseF=FALSE)
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//trueV=TRUE
		public Assignment getTrueVAssignment_2_2_0() { return cTrueVAssignment_2_2_0; }
		
		//TRUE
		public RuleCall getTrueVTRUEParserRuleCall_2_2_0_0() { return cTrueVTRUEParserRuleCall_2_2_0_0; }
		
		//falseF=FALSE
		public Assignment getFalseFAssignment_2_2_1() { return cFalseFAssignment_2_2_1; }
		
		//FALSE
		public RuleCall getFalseFFALSEParserRuleCall_2_2_1_0() { return cFalseFFALSEParserRuleCall_2_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(elementBuild+=ElementBuild)*
		public Assignment getElementBuildAssignment_4() { return cElementBuildAssignment_4; }
		
		//ElementBuild
		public RuleCall getElementBuildElementBuildParserRuleCall_4_0() { return cElementBuildElementBuildParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ElementBuildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ElementBuild");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableDAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDVariableDParserRuleCall_0_0 = (RuleCall)cVariableDAssignment_0.eContents().get(0);
		private final Assignment cPageAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPagePageParserRuleCall_1_0 = (RuleCall)cPageAssignment_1.eContents().get(0);
		private final Assignment cLoopAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLoopLoopParserRuleCall_2_0 = (RuleCall)cLoopAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConditionalConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		
		//ElementBuild:
		//    variableD=VariableD | page=Page | loop=Loop | conditional=Conditional
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variableD=VariableD | page=Page | loop=Loop | conditional=Conditional
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variableD=VariableD
		public Assignment getVariableDAssignment_0() { return cVariableDAssignment_0; }
		
		//VariableD
		public RuleCall getVariableDVariableDParserRuleCall_0_0() { return cVariableDVariableDParserRuleCall_0_0; }
		
		//page=Page
		public Assignment getPageAssignment_1() { return cPageAssignment_1; }
		
		//Page
		public RuleCall getPagePageParserRuleCall_1_0() { return cPagePageParserRuleCall_1_0; }
		
		//loop=Loop
		public Assignment getLoopAssignment_2() { return cLoopAssignment_2; }
		
		//Loop
		public RuleCall getLoopLoopParserRuleCall_2_0() { return cLoopLoopParserRuleCall_2_0; }
		
		//conditional=Conditional
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }
		
		//Conditional
		public RuleCall getConditionalConditionalParserRuleCall_3_0() { return cConditionalConditionalParserRuleCall_3_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//    '$' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'$' name=ID
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VariableDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.VariableD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cFunctionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_2_1_0 = (RuleCall)cFunctionAssignment_2_1.eContents().get(0);
		
		//VariableD:
		//    (variable=Variable ('[' '$' name=ID ']')?) '=' (value+=Value | function+=Function)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(variable=Variable ('[' '$' name=ID ']')?) '=' (value+=Value | function+=Function)
		public Group getGroup() { return cGroup; }
		
		//(variable=Variable ('[' '$' name=ID ']')?)
		public Group getGroup_0() { return cGroup_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_0() { return cVariableVariableParserRuleCall_0_0_0; }
		
		//('[' '$' name=ID ']')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_0_1_1() { return cDollarSignKeyword_0_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_2_0() { return cNameIDTerminalRuleCall_0_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_3() { return cRightSquareBracketKeyword_0_1_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(value+=Value | function+=Function)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//value+=Value
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0_0() { return cValueValueParserRuleCall_2_0_0; }
		
		//function+=Function
		public Assignment getFunctionAssignment_2_1() { return cFunctionAssignment_2_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_1_0() { return cFunctionFunctionParserRuleCall_2_1_0; }
	}
	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_2_0_0_0 = (RuleCall)cVariableAssignment_2_0_0.eContents().get(0);
		private final Assignment cObjectCAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cObjectCObjectCParserRuleCall_2_0_1_0 = (RuleCall)cObjectCAssignment_2_0_1.eContents().get(0);
		private final Assignment cArrayCAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cArrayCArrayCParserRuleCall_2_0_2_0 = (RuleCall)cArrayCAssignment_2_0_2.eContents().get(0);
		private final Assignment cStringAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cStringAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementPageAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementPageElementPageParserRuleCall_5_0 = (RuleCall)cElementPageAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Page:
		//    'page' '(' (variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING )')' '{'
		//        (elementPage+=ElementPage)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'page' '(' (variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING )')' '{'
		//    (elementPage+=ElementPage)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'page'
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2_0_0() { return cVariableAssignment_2_0_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0_0_0() { return cVariableVariableParserRuleCall_2_0_0_0; }
		
		//(objectC=ObjectC)?
		public Assignment getObjectCAssignment_2_0_1() { return cObjectCAssignment_2_0_1; }
		
		//ObjectC
		public RuleCall getObjectCObjectCParserRuleCall_2_0_1_0() { return cObjectCObjectCParserRuleCall_2_0_1_0; }
		
		//(arrayC=ArrayC)?
		public Assignment getArrayCAssignment_2_0_2() { return cArrayCAssignment_2_0_2; }
		
		//ArrayC
		public RuleCall getArrayCArrayCParserRuleCall_2_0_2_0() { return cArrayCArrayCParserRuleCall_2_0_2_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2_1() { return cStringAssignment_2_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_1_0() { return cStringSTRINGTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(elementPage+=ElementPage)*
		public Assignment getElementPageAssignment_5() { return cElementPageAssignment_5; }
		
		//ElementPage
		public RuleCall getElementPageElementPageParserRuleCall_5_0() { return cElementPageElementPageParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ElementPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ElementPage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRowAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRowRowParserRuleCall_0_0 = (RuleCall)cRowAssignment_0.eContents().get(0);
		private final Assignment cLoopAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLoopLoopParserRuleCall_1_0 = (RuleCall)cLoopAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConditionalConditionalParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cVariableAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVariableVariableDParserRuleCall_3_0_0 = (RuleCall)cVariableAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//ElementPage:
		//    row=Row | loop=Loop | conditional=Conditional | (variable=VariableD ';')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//row=Row | loop=Loop | conditional=Conditional | (variable=VariableD ';')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//row=Row
		public Assignment getRowAssignment_0() { return cRowAssignment_0; }
		
		//Row
		public RuleCall getRowRowParserRuleCall_0_0() { return cRowRowParserRuleCall_0_0; }
		
		//loop=Loop
		public Assignment getLoopAssignment_1() { return cLoopAssignment_1; }
		
		//Loop
		public RuleCall getLoopLoopParserRuleCall_1_0() { return cLoopLoopParserRuleCall_1_0; }
		
		//conditional=Conditional
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//Conditional
		public RuleCall getConditionalConditionalParserRuleCall_2_0() { return cConditionalConditionalParserRuleCall_2_0; }
		
		//(variable=VariableD ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//variable=VariableD
		public Assignment getVariableAssignment_3_0() { return cVariableAssignment_3_0; }
		
		//VariableD
		public RuleCall getVariableVariableDParserRuleCall_3_0_0() { return cVariableVariableDParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementRowAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementRowElementRowParserRuleCall_2_0 = (RuleCall)cElementRowAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Row:
		//    'row' '{'
		//        (elementRow+=ElementRow)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'row' '{'
		//    (elementRow+=ElementRow)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elementRow+=ElementRow)*
		public Assignment getElementRowAssignment_2() { return cElementRowAssignment_2; }
		
		//ElementRow
		public RuleCall getElementRowElementRowParserRuleCall_2_0() { return cElementRowElementRowParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ElementRow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cVariableDAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDVariableDParserRuleCall_1_0 = (RuleCall)cVariableDAssignment_1.eContents().get(0);
		private final Assignment cColAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cColColParserRuleCall_2_0 = (RuleCall)cColAssignment_2.eContents().get(0);
		private final Assignment cConditionalAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConditionalConditionalParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Assignment cLoopAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cLoopLoopParserRuleCall_4_0 = (RuleCall)cLoopAssignment_4.eContents().get(0);
		
		//ElementRow:
		//    variable=Variable | variableD=VariableD | col=Col | conditional=Conditional | loop=Loop
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable | variableD=VariableD | col=Col | conditional=Conditional | loop=Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//variableD=VariableD
		public Assignment getVariableDAssignment_1() { return cVariableDAssignment_1; }
		
		//VariableD
		public RuleCall getVariableDVariableDParserRuleCall_1_0() { return cVariableDVariableDParserRuleCall_1_0; }
		
		//col=Col
		public Assignment getColAssignment_2() { return cColAssignment_2; }
		
		//Col
		public RuleCall getColColParserRuleCall_2_0() { return cColColParserRuleCall_2_0; }
		
		//conditional=Conditional
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }
		
		//Conditional
		public RuleCall getConditionalConditionalParserRuleCall_3_0() { return cConditionalConditionalParserRuleCall_3_0; }
		
		//loop=Loop
		public Assignment getLoopAssignment_4() { return cLoopAssignment_4; }
		
		//Loop
		public RuleCall getLoopLoopParserRuleCall_4_0() { return cLoopLoopParserRuleCall_4_0; }
	}
	public class ColElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Col");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFusionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFusionFusionParserRuleCall_1_0 = (RuleCall)cFusionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImgAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cImgImgParserRuleCall_2_0_0 = (RuleCall)cImgAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cVariableAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_2_1_0_0 = (RuleCall)cVariableAssignment_2_1_0.eContents().get(0);
		private final Assignment cObjectCAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cObjectCObjectCParserRuleCall_2_1_1_0 = (RuleCall)cObjectCAssignment_2_1_1.eContents().get(0);
		private final Assignment cArrayCAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cArrayCArrayCParserRuleCall_2_1_2_0 = (RuleCall)cArrayCAssignment_2_1_2.eContents().get(0);
		private final Assignment cVariableDAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cVariableDVariableDParserRuleCall_2_2_0 = (RuleCall)cVariableDAssignment_2_2.eContents().get(0);
		private final Assignment cStringAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cStringAssignment_2_3.eContents().get(0);
		private final Assignment cIntegerAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cIntegerINTTerminalRuleCall_2_4_0 = (RuleCall)cIntegerAssignment_2_4.eContents().get(0);
		private final Assignment cFloatValueAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cFloatValueFloatParserRuleCall_2_5_0 = (RuleCall)cFloatValueAssignment_2_5.eContents().get(0);
		private final Assignment cFunctionAssignment_2_6 = (Assignment)cAlternatives_2.eContents().get(6);
		private final RuleCall cFunctionFunctionParserRuleCall_2_6_0 = (RuleCall)cFunctionAssignment_2_6.eContents().get(0);
		private final Assignment cClassDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassDClassDParserRuleCall_3_0 = (RuleCall)cClassDAssignment_3.eContents().get(0);
		
		//Col:
		//    'col' fusion=Fusion ( img=Img | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | variableD=VariableD | string=STRING | integer=INT | floatValue=Float | function=Function ) classD=ClassD
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'col' fusion=Fusion ( img=Img | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | variableD=VariableD | string=STRING | integer=INT | floatValue=Float | function=Function ) classD=ClassD
		public Group getGroup() { return cGroup; }
		
		//'col'
		public Keyword getColKeyword_0() { return cColKeyword_0; }
		
		//fusion=Fusion
		public Assignment getFusionAssignment_1() { return cFusionAssignment_1; }
		
		//Fusion
		public RuleCall getFusionFusionParserRuleCall_1_0() { return cFusionFusionParserRuleCall_1_0; }
		
		//( img=Img | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | variableD=VariableD | string=STRING | integer=INT | floatValue=Float | function=Function )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//img=Img
		public Assignment getImgAssignment_2_0() { return cImgAssignment_2_0; }
		
		//Img
		public RuleCall getImgImgParserRuleCall_2_0_0() { return cImgImgParserRuleCall_2_0_0; }
		
		//variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2_1_0() { return cVariableAssignment_2_1_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_1_0_0() { return cVariableVariableParserRuleCall_2_1_0_0; }
		
		//(objectC=ObjectC)?
		public Assignment getObjectCAssignment_2_1_1() { return cObjectCAssignment_2_1_1; }
		
		//ObjectC
		public RuleCall getObjectCObjectCParserRuleCall_2_1_1_0() { return cObjectCObjectCParserRuleCall_2_1_1_0; }
		
		//(arrayC=ArrayC)?
		public Assignment getArrayCAssignment_2_1_2() { return cArrayCAssignment_2_1_2; }
		
		//ArrayC
		public RuleCall getArrayCArrayCParserRuleCall_2_1_2_0() { return cArrayCArrayCParserRuleCall_2_1_2_0; }
		
		//variableD=VariableD
		public Assignment getVariableDAssignment_2_2() { return cVariableDAssignment_2_2; }
		
		//VariableD
		public RuleCall getVariableDVariableDParserRuleCall_2_2_0() { return cVariableDVariableDParserRuleCall_2_2_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2_3() { return cStringAssignment_2_3; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_3_0() { return cStringSTRINGTerminalRuleCall_2_3_0; }
		
		//integer=INT
		public Assignment getIntegerAssignment_2_4() { return cIntegerAssignment_2_4; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_2_4_0() { return cIntegerINTTerminalRuleCall_2_4_0; }
		
		//floatValue=Float
		public Assignment getFloatValueAssignment_2_5() { return cFloatValueAssignment_2_5; }
		
		//Float
		public RuleCall getFloatValueFloatParserRuleCall_2_5_0() { return cFloatValueFloatParserRuleCall_2_5_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_2_6() { return cFunctionAssignment_2_6; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_6_0() { return cFunctionFunctionParserRuleCall_2_6_0; }
		
		//classD=ClassD
		public Assignment getClassDAssignment_3() { return cClassDAssignment_3; }
		
		//ClassD
		public RuleCall getClassDClassDParserRuleCall_3_0() { return cClassDClassDParserRuleCall_3_0; }
	}
	public class ArrayCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ArrayC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPositionPositionParserRuleCall_1_0 = (RuleCall)cPositionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayC:
		//    '[' position=Position ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' position=Position ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//position=Position
		public Assignment getPositionAssignment_1() { return cPositionAssignment_1; }
		
		//Position
		public RuleCall getPositionPositionParserRuleCall_1_0() { return cPositionPositionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Position");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerINTTerminalRuleCall_0_0 = (RuleCall)cIntegerAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//Position:
		//    integer=INT | variable=Variable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//integer=INT | variable=Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer=INT
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_0_0() { return cIntegerINTTerminalRuleCall_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
	}
	public class ObjectCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ObjectC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ObjectC:
		//    '.' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' name=ID
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ImgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Img");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassDClassDParserRuleCall_1_0 = (RuleCall)cClassDAssignment_1.eContents().get(0);
		private final Keyword cSrcKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStringAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cStringAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cVariableAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_4_1_0_0 = (RuleCall)cVariableAssignment_4_1_0.eContents().get(0);
		private final Assignment cObjectCAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cObjectCObjectCParserRuleCall_4_1_1_0 = (RuleCall)cObjectCAssignment_4_1_1.eContents().get(0);
		private final Assignment cArrayCAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cArrayCArrayCParserRuleCall_4_1_2_0 = (RuleCall)cArrayCAssignment_4_1_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAltKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cStringAltAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cStringAltSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cStringAltAssignment_5_2.eContents().get(0);
		
		//Img:
		//    'img' (classD=ClassD) 'src' ':' (string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?) ('alt' ':' stringAlt=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'img' (classD=ClassD) 'src' ':' (string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?) ('alt' ':' stringAlt=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'img'
		public Keyword getImgKeyword_0() { return cImgKeyword_0; }
		
		//(classD=ClassD)
		public Assignment getClassDAssignment_1() { return cClassDAssignment_1; }
		
		//ClassD
		public RuleCall getClassDClassDParserRuleCall_1_0() { return cClassDClassDParserRuleCall_1_0; }
		
		//'src'
		public Keyword getSrcKeyword_2() { return cSrcKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//string=STRING
		public Assignment getStringAssignment_4_0() { return cStringAssignment_4_0; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0_0() { return cStringSTRINGTerminalRuleCall_4_0_0; }
		
		//variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//variable=Variable
		public Assignment getVariableAssignment_4_1_0() { return cVariableAssignment_4_1_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_4_1_0_0() { return cVariableVariableParserRuleCall_4_1_0_0; }
		
		//(objectC=ObjectC)?
		public Assignment getObjectCAssignment_4_1_1() { return cObjectCAssignment_4_1_1; }
		
		//ObjectC
		public RuleCall getObjectCObjectCParserRuleCall_4_1_1_0() { return cObjectCObjectCParserRuleCall_4_1_1_0; }
		
		//(arrayC=ArrayC)?
		public Assignment getArrayCAssignment_4_1_2() { return cArrayCAssignment_4_1_2; }
		
		//ArrayC
		public RuleCall getArrayCArrayCParserRuleCall_4_1_2_0() { return cArrayCArrayCParserRuleCall_4_1_2_0; }
		
		//('alt' ':' stringAlt=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'alt'
		public Keyword getAltKeyword_5_0() { return cAltKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//stringAlt=STRING
		public Assignment getStringAltAssignment_5_2() { return cStringAltAssignment_5_2; }
		
		//STRING
		public RuleCall getStringAltSTRINGTerminalRuleCall_5_2_0() { return cStringAltSTRINGTerminalRuleCall_5_2_0; }
	}
	public class ClassDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ClassD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		
		//ClassD:
		//    ('class' '=' string=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('class' '=' string=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
	}
	public class FusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Fusion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cColspanAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cColspanColspanParserRuleCall_0_0 = (RuleCall)cColspanAssignment_0.eContents().get(0);
		private final Assignment cRowspanAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRowspanRowspanParserRuleCall_1_0 = (RuleCall)cRowspanAssignment_1.eContents().get(0);
		
		//Fusion:
		//    (colspan=Colspan | rowspan=Rowspan)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(colspan=Colspan | rowspan=Rowspan)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//colspan=Colspan
		public Assignment getColspanAssignment_0() { return cColspanAssignment_0; }
		
		//Colspan
		public RuleCall getColspanColspanParserRuleCall_0_0() { return cColspanColspanParserRuleCall_0_0; }
		
		//rowspan=Rowspan
		public Assignment getRowspanAssignment_1() { return cRowspanAssignment_1; }
		
		//Rowspan
		public RuleCall getRowspanRowspanParserRuleCall_1_0() { return cRowspanRowspanParserRuleCall_1_0; }
	}
	public class ColspanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Colspan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColspanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIntegerAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIntegerINTTerminalRuleCall_2_0_0 = (RuleCall)cIntegerAssignment_2_0.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		
		//Colspan:
		//    'colspan' ':' (integer=INT | variable=Variable)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'colspan' ':' (integer=INT | variable=Variable)
		public Group getGroup() { return cGroup; }
		
		//'colspan'
		public Keyword getColspanKeyword_0() { return cColspanKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(integer=INT | variable=Variable)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//integer=INT
		public Assignment getIntegerAssignment_2_0() { return cIntegerAssignment_2_0; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_2_0_0() { return cIntegerINTTerminalRuleCall_2_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_1_0() { return cVariableVariableParserRuleCall_2_1_0; }
	}
	public class RowspanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Rowspan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowspanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIntegerAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIntegerINTTerminalRuleCall_2_0_0 = (RuleCall)cIntegerAssignment_2_0.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		
		//Rowspan:
		//    'rowspan' ':' (integer=INT | variable=Variable)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rowspan' ':' (integer=INT | variable=Variable)
		public Group getGroup() { return cGroup; }
		
		//'rowspan'
		public Keyword getRowspanKeyword_0() { return cRowspanKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(integer=INT | variable=Variable)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//integer=INT
		public Assignment getIntegerAssignment_2_0() { return cIntegerAssignment_2_0; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_2_0_0() { return cIntegerINTTerminalRuleCall_2_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_1_0() { return cVariableVariableParserRuleCall_2_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSumFunctionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSumFunctionSumFunctionParserRuleCall_0_0 = (RuleCall)cSumFunctionAssignment_0.eContents().get(0);
		private final Assignment cProdFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProdFunctionProdFunctionParserRuleCall_1_0 = (RuleCall)cProdFunctionAssignment_1.eContents().get(0);
		private final Assignment cDivFunctionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDivFunctionDivFunctionParserRuleCall_2_0 = (RuleCall)cDivFunctionAssignment_2.eContents().get(0);
		
		//Function:
		//    sumFunction=SumFunction | prodFunction=ProdFunction | divFunction=DivFunction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sumFunction=SumFunction | prodFunction=ProdFunction | divFunction=DivFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sumFunction=SumFunction
		public Assignment getSumFunctionAssignment_0() { return cSumFunctionAssignment_0; }
		
		//SumFunction
		public RuleCall getSumFunctionSumFunctionParserRuleCall_0_0() { return cSumFunctionSumFunctionParserRuleCall_0_0; }
		
		//prodFunction=ProdFunction
		public Assignment getProdFunctionAssignment_1() { return cProdFunctionAssignment_1; }
		
		//ProdFunction
		public RuleCall getProdFunctionProdFunctionParserRuleCall_1_0() { return cProdFunctionProdFunctionParserRuleCall_1_0; }
		
		//divFunction=DivFunction
		public Assignment getDivFunctionAssignment_2() { return cDivFunctionAssignment_2; }
		
		//DivFunction
		public RuleCall getDivFunctionDivFunctionParserRuleCall_2_0() { return cDivFunctionDivFunctionParserRuleCall_2_0; }
	}
	public class SumFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.SumFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSUMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cArgument1Assignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cArgument1Argument1ParserRuleCall_2_0_0_0 = (RuleCall)cArgument1Assignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cArgument1Assignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cArgument1Argument1ParserRuleCall_2_0_1_1_0 = (RuleCall)cArgument1Assignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgument2Assignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgument2Argument2ParserRuleCall_2_1_1_0 = (RuleCall)cArgument2Assignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SumFunction:
		//    'SUM' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' (argument2+=Argument2)+ ']') ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SUM' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' (argument2+=Argument2)+ ']') ')'
		public Group getGroup() { return cGroup; }
		
		//'SUM'
		public Keyword getSUMKeyword_0() { return cSUMKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' (argument2+=Argument2)+ ']')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(argument1+=Argument1 (',' argument1+=Argument1)*)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//argument1+=Argument1
		public Assignment getArgument1Assignment_2_0_0() { return cArgument1Assignment_2_0_0; }
		
		//Argument1
		public RuleCall getArgument1Argument1ParserRuleCall_2_0_0_0() { return cArgument1Argument1ParserRuleCall_2_0_0_0; }
		
		//(',' argument1+=Argument1)*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_0() { return cCommaKeyword_2_0_1_0; }
		
		//argument1+=Argument1
		public Assignment getArgument1Assignment_2_0_1_1() { return cArgument1Assignment_2_0_1_1; }
		
		//Argument1
		public RuleCall getArgument1Argument1ParserRuleCall_2_0_1_1_0() { return cArgument1Argument1ParserRuleCall_2_0_1_1_0; }
		
		//'[' (argument2+=Argument2)+ ']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }
		
		//(argument2+=Argument2)+
		public Assignment getArgument2Assignment_2_1_1() { return cArgument2Assignment_2_1_1; }
		
		//Argument2
		public RuleCall getArgument2Argument2ParserRuleCall_2_1_1_0() { return cArgument2Argument2ParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ProdFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ProdFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRODKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cArgument1Assignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cArgument1Argument1ParserRuleCall_2_0_0_0 = (RuleCall)cArgument1Assignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cArgument1Assignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cArgument1Argument1ParserRuleCall_2_0_1_1_0 = (RuleCall)cArgument1Assignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgument2Assignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgument2Argument2ParserRuleCall_2_1_1_0 = (RuleCall)cArgument2Assignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProdFunction:
		//    'PROD' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' argument2+=Argument2 ']') ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'PROD' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' argument2+=Argument2 ']') ')'
		public Group getGroup() { return cGroup; }
		
		//'PROD'
		public Keyword getPRODKeyword_0() { return cPRODKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' argument2+=Argument2 ']')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(argument1+=Argument1 (',' argument1+=Argument1)*)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//argument1+=Argument1
		public Assignment getArgument1Assignment_2_0_0() { return cArgument1Assignment_2_0_0; }
		
		//Argument1
		public RuleCall getArgument1Argument1ParserRuleCall_2_0_0_0() { return cArgument1Argument1ParserRuleCall_2_0_0_0; }
		
		//(',' argument1+=Argument1)*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_0() { return cCommaKeyword_2_0_1_0; }
		
		//argument1+=Argument1
		public Assignment getArgument1Assignment_2_0_1_1() { return cArgument1Assignment_2_0_1_1; }
		
		//Argument1
		public RuleCall getArgument1Argument1ParserRuleCall_2_0_1_1_0() { return cArgument1Argument1ParserRuleCall_2_0_1_1_0; }
		
		//'[' argument2+=Argument2 ']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }
		
		//argument2+=Argument2
		public Assignment getArgument2Assignment_2_1_1() { return cArgument2Assignment_2_1_1; }
		
		//Argument2
		public RuleCall getArgument2Argument2ParserRuleCall_2_1_1_0() { return cArgument2Argument2ParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DivFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.DivFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDIVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgument1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgument1Argument1ParserRuleCall_2_0 = (RuleCall)cArgument1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgument1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgument1Argument1ParserRuleCall_4_0 = (RuleCall)cArgument1Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DivFunction:
		//    'DIV' '(' argument1+=Argument1 ',' argument1+=Argument1 ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'DIV' '(' argument1+=Argument1 ',' argument1+=Argument1 ')'
		public Group getGroup() { return cGroup; }
		
		//'DIV'
		public Keyword getDIVKeyword_0() { return cDIVKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argument1+=Argument1
		public Assignment getArgument1Assignment_2() { return cArgument1Assignment_2; }
		
		//Argument1
		public RuleCall getArgument1Argument1ParserRuleCall_2_0() { return cArgument1Argument1ParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//argument1+=Argument1
		public Assignment getArgument1Assignment_4() { return cArgument1Assignment_4; }
		
		//Argument1
		public RuleCall getArgument1Argument1ParserRuleCall_4_0() { return cArgument1Argument1ParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Argument1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Argument1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerINTTerminalRuleCall_0_0 = (RuleCall)cIntegerAssignment_0.eContents().get(0);
		private final Assignment cFloatValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFloatValueFloatParserRuleCall_1_0 = (RuleCall)cFloatValueAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cVariableAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_3_0_0 = (RuleCall)cVariableAssignment_3_0.eContents().get(0);
		private final Assignment cObjectCAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cObjectCObjectCParserRuleCall_3_1_0 = (RuleCall)cObjectCAssignment_3_1.eContents().get(0);
		private final Assignment cArrayCAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cArrayCArrayCParserRuleCall_3_2_0 = (RuleCall)cArrayCAssignment_3_2.eContents().get(0);
		
		//Argument1:
		//    integer=INT | floatValue=Float | string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//integer=INT | floatValue=Float | string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer=INT
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_0_0() { return cIntegerINTTerminalRuleCall_0_0; }
		
		//floatValue=Float
		public Assignment getFloatValueAssignment_1() { return cFloatValueAssignment_1; }
		
		//Float
		public RuleCall getFloatValueFloatParserRuleCall_1_0() { return cFloatValueFloatParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
		public Group getGroup_3() { return cGroup_3; }
		
		//variable=Variable
		public Assignment getVariableAssignment_3_0() { return cVariableAssignment_3_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0_0() { return cVariableVariableParserRuleCall_3_0_0; }
		
		//(objectC=ObjectC)?
		public Assignment getObjectCAssignment_3_1() { return cObjectCAssignment_3_1; }
		
		//ObjectC
		public RuleCall getObjectCObjectCParserRuleCall_3_1_0() { return cObjectCObjectCParserRuleCall_3_1_0; }
		
		//(arrayC=ArrayC)?
		public Assignment getArrayCAssignment_3_2() { return cArrayCAssignment_3_2; }
		
		//ArrayC
		public RuleCall getArrayCArrayCParserRuleCall_3_2_0() { return cArrayCArrayCParserRuleCall_3_2_0; }
	}
	public class Argument2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Argument2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Assignment cIntegerAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cIntegerINTTerminalRuleCall_0_1_0 = (RuleCall)cIntegerAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cVariableAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_1_1_0_0 = (RuleCall)cVariableAssignment_1_1_0.eContents().get(0);
		private final Assignment cIntegerEnd1Assignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIntegerEnd1INTTerminalRuleCall_1_1_1_0 = (RuleCall)cIntegerEnd1Assignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cVariableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_3_0_0 = (RuleCall)cVariableAssignment_3_0.eContents().get(0);
		private final Assignment cIntegerEnd2Assignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cIntegerEnd2INTTerminalRuleCall_3_1_0 = (RuleCall)cIntegerEnd2Assignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cVariableAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_4_1_0_0 = (RuleCall)cVariableAssignment_4_1_0.eContents().get(0);
		private final Assignment cIntegerEnd3Assignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cIntegerEnd3INTTerminalRuleCall_4_1_1_0 = (RuleCall)cIntegerEnd3Assignment_4_1_1.eContents().get(0);
		
		//Argument2:
		//    (variable+=Variable | integer=INT) (('-' | '+') (variable+=Variable | integerEnd1=INT))? ',' (variable+=Variable | integerEnd2=INT) (('-' | '+') (variable+=Variable | integerEnd3=INT))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(variable+=Variable | integer=INT) (('-' | '+') (variable+=Variable | integerEnd1=INT))? ',' (variable+=Variable | integerEnd2=INT) (('-' | '+') (variable+=Variable | integerEnd3=INT))?
		public Group getGroup() { return cGroup; }
		
		//(variable+=Variable | integer=INT)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_0() { return cVariableVariableParserRuleCall_0_0_0; }
		
		//integer=INT
		public Assignment getIntegerAssignment_0_1() { return cIntegerAssignment_0_1; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_0_1_0() { return cIntegerINTTerminalRuleCall_0_1_0; }
		
		//(('-' | '+') (variable+=Variable | integerEnd1=INT))?
		public Group getGroup_1() { return cGroup_1; }
		
		//('-' | '+')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//(variable+=Variable | integerEnd1=INT)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_1_1_0() { return cVariableAssignment_1_1_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_0_0() { return cVariableVariableParserRuleCall_1_1_0_0; }
		
		//integerEnd1=INT
		public Assignment getIntegerEnd1Assignment_1_1_1() { return cIntegerEnd1Assignment_1_1_1; }
		
		//INT
		public RuleCall getIntegerEnd1INTTerminalRuleCall_1_1_1_0() { return cIntegerEnd1INTTerminalRuleCall_1_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//(variable+=Variable | integerEnd2=INT)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_3_0() { return cVariableAssignment_3_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0_0() { return cVariableVariableParserRuleCall_3_0_0; }
		
		//integerEnd2=INT
		public Assignment getIntegerEnd2Assignment_3_1() { return cIntegerEnd2Assignment_3_1; }
		
		//INT
		public RuleCall getIntegerEnd2INTTerminalRuleCall_3_1_0() { return cIntegerEnd2INTTerminalRuleCall_3_1_0; }
		
		//(('-' | '+') (variable+=Variable | integerEnd3=INT))?
		public Group getGroup_4() { return cGroup_4; }
		
		//('-' | '+')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4_0_0() { return cHyphenMinusKeyword_4_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_0_1() { return cPlusSignKeyword_4_0_1; }
		
		//(variable+=Variable | integerEnd3=INT)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_4_1_0() { return cVariableAssignment_4_1_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_4_1_0_0() { return cVariableVariableParserRuleCall_4_1_0_0; }
		
		//integerEnd3=INT
		public Assignment getIntegerEnd3Assignment_4_1_1() { return cIntegerEnd3Assignment_4_1_1; }
		
		//INT
		public RuleCall getIntegerEnd3INTTerminalRuleCall_4_1_1_0() { return cIntegerEnd3INTTerminalRuleCall_4_1_1_0; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEqualConditionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEqualConditionEqualConditionParserRuleCall_1_0_0 = (RuleCall)cEqualConditionAssignment_1_0.eContents().get(0);
		private final Assignment cNotEqualConditionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNotEqualConditionNoEqualConditionParserRuleCall_1_1_0 = (RuleCall)cNotEqualConditionAssignment_1_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOtherElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOtherElementOtherElementParserRuleCall_4_0 = (RuleCall)cOtherElementAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Conditional:
		//    'if' (equalCondition=EqualCondition | notEqualCondition=NoEqualCondition) 'then' '{'
		//        (otherElement+=OtherElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' (equalCondition=EqualCondition | notEqualCondition=NoEqualCondition) 'then' '{'
		//    (otherElement+=OtherElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(equalCondition=EqualCondition | notEqualCondition=NoEqualCondition)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//equalCondition=EqualCondition
		public Assignment getEqualConditionAssignment_1_0() { return cEqualConditionAssignment_1_0; }
		
		//EqualCondition
		public RuleCall getEqualConditionEqualConditionParserRuleCall_1_0_0() { return cEqualConditionEqualConditionParserRuleCall_1_0_0; }
		
		//notEqualCondition=NoEqualCondition
		public Assignment getNotEqualConditionAssignment_1_1() { return cNotEqualConditionAssignment_1_1; }
		
		//NoEqualCondition
		public RuleCall getNotEqualConditionNoEqualConditionParserRuleCall_1_1_0() { return cNotEqualConditionNoEqualConditionParserRuleCall_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(otherElement+=OtherElement)*
		public Assignment getOtherElementAssignment_4() { return cOtherElementAssignment_4; }
		
		//OtherElement
		public RuleCall getOtherElementOtherElementParserRuleCall_4_0() { return cOtherElementOtherElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EqualConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.EqualCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EqualCondition:
		//    (variable=Variable 'is' value=Value 'then')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(variable=Variable 'is' value=Value 'then')
		public Group getGroup() { return cGroup; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
	}
	public class NoEqualConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.NoEqualCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cIsNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NoEqualCondition:
		//    (variable=Variable 'isNot' value=Value 'then')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(variable=Variable 'isNot' value=Value 'then')
		public Group getGroup() { return cGroup; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//'isNot'
		public Keyword getIsNotKeyword_1() { return cIsNotKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Loop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWithLoopAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cWithLoopWithParserRuleCall_0_0 = (RuleCall)cWithLoopAssignment_0.eContents().get(0);
		private final Assignment cForLoopAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cForLoopForParserRuleCall_1_0 = (RuleCall)cForLoopAssignment_1.eContents().get(0);
		
		//Loop:
		//    withLoop=With | forLoop=For
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//withLoop=With | forLoop=For
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//withLoop=With
		public Assignment getWithLoopAssignment_0() { return cWithLoopAssignment_0; }
		
		//With
		public RuleCall getWithLoopWithParserRuleCall_0_0() { return cWithLoopWithParserRuleCall_0_0; }
		
		//forLoop=For
		public Assignment getForLoopAssignment_1() { return cForLoopAssignment_1; }
		
		//For
		public RuleCall getForLoopForParserRuleCall_1_0() { return cForLoopForParserRuleCall_1_0; }
	}
	public class WithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.With");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitVariableParserRuleCall_1_0 = (RuleCall)cInitAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Assignment cObjectCAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectCObjectCParserRuleCall_4_0 = (RuleCall)cObjectCAssignment_4.eContents().get(0);
		private final Assignment cArrayCAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArrayCArrayCParserRuleCall_5_0 = (RuleCall)cArrayCAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOtherElementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOtherElementOtherElementParserRuleCall_7_0 = (RuleCall)cOtherElementAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//With:
		//    'with' init=Variable 'in' variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? '{'
		//        (otherElement+=OtherElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' init=Variable 'in' variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? '{'
		//    (otherElement+=OtherElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//init=Variable
		public Assignment getInitAssignment_1() { return cInitAssignment_1; }
		
		//Variable
		public RuleCall getInitVariableParserRuleCall_1_0() { return cInitVariableParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
		
		//(objectC=ObjectC)?
		public Assignment getObjectCAssignment_4() { return cObjectCAssignment_4; }
		
		//ObjectC
		public RuleCall getObjectCObjectCParserRuleCall_4_0() { return cObjectCObjectCParserRuleCall_4_0; }
		
		//(arrayC=ArrayC)?
		public Assignment getArrayCAssignment_5() { return cArrayCAssignment_5; }
		
		//ArrayC
		public RuleCall getArrayCArrayCParserRuleCall_5_0() { return cArrayCArrayCParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(otherElement+=OtherElement)*
		public Assignment getOtherElementAssignment_7() { return cOtherElementAssignment_7; }
		
		//OtherElement
		public RuleCall getOtherElementOtherElementParserRuleCall_7_0() { return cOtherElementOtherElementParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncrementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncrementVariableParserRuleCall_0_0 = (RuleCall)cIncrementAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInitWithVariableAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cInitWithVariableVariableParserRuleCall_2_0_0 = (RuleCall)cInitWithVariableAssignment_2_0.eContents().get(0);
		private final Assignment cInitWithIntegerAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInitWithIntegerINTTerminalRuleCall_2_1_0 = (RuleCall)cInitWithIntegerAssignment_2_1.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cEndWithVariableAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cEndWithVariableVariableParserRuleCall_4_0_0_0 = (RuleCall)cEndWithVariableAssignment_4_0_0.eContents().get(0);
		private final Assignment cObjectCAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cObjectCObjectCParserRuleCall_4_0_1_0 = (RuleCall)cObjectCAssignment_4_0_1.eContents().get(0);
		private final Assignment cEndWithIntegerAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEndWithIntegerINTTerminalRuleCall_4_1_0 = (RuleCall)cEndWithIntegerAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOtherElementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOtherElementOtherElementParserRuleCall_6_0 = (RuleCall)cOtherElementAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//For:
		//    increment=Variable 'from' (initWithVariable=Variable | initWithInteger=INT) 'to' (endWithVariable=Variable (objectC=ObjectC)? | endWithInteger=INT)'{'
		//        (otherElement+=OtherElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//increment=Variable 'from' (initWithVariable=Variable | initWithInteger=INT) 'to' (endWithVariable=Variable (objectC=ObjectC)? | endWithInteger=INT)'{'
		//    (otherElement+=OtherElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//increment=Variable
		public Assignment getIncrementAssignment_0() { return cIncrementAssignment_0; }
		
		//Variable
		public RuleCall getIncrementVariableParserRuleCall_0_0() { return cIncrementVariableParserRuleCall_0_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//(initWithVariable=Variable | initWithInteger=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//initWithVariable=Variable
		public Assignment getInitWithVariableAssignment_2_0() { return cInitWithVariableAssignment_2_0; }
		
		//Variable
		public RuleCall getInitWithVariableVariableParserRuleCall_2_0_0() { return cInitWithVariableVariableParserRuleCall_2_0_0; }
		
		//initWithInteger=INT
		public Assignment getInitWithIntegerAssignment_2_1() { return cInitWithIntegerAssignment_2_1; }
		
		//INT
		public RuleCall getInitWithIntegerINTTerminalRuleCall_2_1_0() { return cInitWithIntegerINTTerminalRuleCall_2_1_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//(endWithVariable=Variable (objectC=ObjectC)? | endWithInteger=INT)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//endWithVariable=Variable (objectC=ObjectC)?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//endWithVariable=Variable
		public Assignment getEndWithVariableAssignment_4_0_0() { return cEndWithVariableAssignment_4_0_0; }
		
		//Variable
		public RuleCall getEndWithVariableVariableParserRuleCall_4_0_0_0() { return cEndWithVariableVariableParserRuleCall_4_0_0_0; }
		
		//(objectC=ObjectC)?
		public Assignment getObjectCAssignment_4_0_1() { return cObjectCAssignment_4_0_1; }
		
		//ObjectC
		public RuleCall getObjectCObjectCParserRuleCall_4_0_1_0() { return cObjectCObjectCParserRuleCall_4_0_1_0; }
		
		//endWithInteger=INT
		public Assignment getEndWithIntegerAssignment_4_1() { return cEndWithIntegerAssignment_4_1; }
		
		//INT
		public RuleCall getEndWithIntegerINTTerminalRuleCall_4_1_0() { return cEndWithIntegerINTTerminalRuleCall_4_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(otherElement+=OtherElement)*
		public Assignment getOtherElementAssignment_6() { return cOtherElementAssignment_6; }
		
		//OtherElement
		public RuleCall getOtherElementOtherElementParserRuleCall_6_0() { return cOtherElementOtherElementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class OtherElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.OtherElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPageAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPagePageParserRuleCall_0_0 = (RuleCall)cPageAssignment_0.eContents().get(0);
		private final Assignment cRowAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRowRowParserRuleCall_1_0 = (RuleCall)cRowAssignment_1.eContents().get(0);
		private final Assignment cColAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cColColParserRuleCall_2_0 = (RuleCall)cColAssignment_2.eContents().get(0);
		private final Assignment cLoopAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cLoopLoopParserRuleCall_3_0 = (RuleCall)cLoopAssignment_3.eContents().get(0);
		private final Assignment cConditionalAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cConditionalConditionalParserRuleCall_4_0 = (RuleCall)cConditionalAssignment_4.eContents().get(0);
		
		//OtherElement:
		//    page=Page | row=Row | col=Col | loop=Loop | conditional=Conditional
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//page=Page | row=Row | col=Col | loop=Loop | conditional=Conditional
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//page=Page
		public Assignment getPageAssignment_0() { return cPageAssignment_0; }
		
		//Page
		public RuleCall getPagePageParserRuleCall_0_0() { return cPagePageParserRuleCall_0_0; }
		
		//row=Row
		public Assignment getRowAssignment_1() { return cRowAssignment_1; }
		
		//Row
		public RuleCall getRowRowParserRuleCall_1_0() { return cRowRowParserRuleCall_1_0; }
		
		//col=Col
		public Assignment getColAssignment_2() { return cColAssignment_2; }
		
		//Col
		public RuleCall getColColParserRuleCall_2_0() { return cColColParserRuleCall_2_0; }
		
		//loop=Loop
		public Assignment getLoopAssignment_3() { return cLoopAssignment_3; }
		
		//Loop
		public RuleCall getLoopLoopParserRuleCall_3_0() { return cLoopLoopParserRuleCall_3_0; }
		
		//conditional=Conditional
		public Assignment getConditionalAssignment_4() { return cConditionalAssignment_4; }
		
		//Conditional
		public RuleCall getConditionalConditionalParserRuleCall_4_0() { return cConditionalConditionalParserRuleCall_4_0; }
	}
	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCssAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCssCssParserRuleCall_2_0 = (RuleCall)cCssAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Section de définition du style du document
		//Style:
		//    'style' '{' css=Css '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'style' '{' css=Css '}'
		public Group getGroup() { return cGroup; }
		
		//'style'
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//css=Css
		public Assignment getCssAssignment_2() { return cCssAssignment_2; }
		
		//Css
		public RuleCall getCssCssParserRuleCall_2_0() { return cCssCssParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Css");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//Css:
		//    (rules+=Rule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(rules+=Rule)*
		public Assignment getRulesAssignment() { return cRulesAssignment; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_0() { return cRulesRuleParserRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_0 = (RuleCall)cSelectorAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rule:
		//    selector=Selector "{"
		//        (declarations+=Declaration)*
		//    "}";
		@Override public ParserRule getRule() { return rule; }
		
		//selector=Selector "{"
		//    (declarations+=Declaration)*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_0() { return cSelectorAssignment_0; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_0_0() { return cSelectorSelectorParserRuleCall_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(declarations+=Declaration)*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdSelectorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdSelectorIDSelectorParserRuleCall_0_0 = (RuleCall)cIdSelectorAssignment_0.eContents().get(0);
		private final Assignment cClassSelectorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cClassSelectorClassSelectorParserRuleCall_1_0 = (RuleCall)cClassSelectorAssignment_1.eContents().get(0);
		private final Assignment cTypeSelectorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypeSelectorTypeSelectorParserRuleCall_2_0 = (RuleCall)cTypeSelectorAssignment_2.eContents().get(0);
		
		//Selector:
		//    idSelector=IDSelector | classSelector=ClassSelector | typeSelector=TypeSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//idSelector=IDSelector | classSelector=ClassSelector | typeSelector=TypeSelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//idSelector=IDSelector
		public Assignment getIdSelectorAssignment_0() { return cIdSelectorAssignment_0; }
		
		//IDSelector
		public RuleCall getIdSelectorIDSelectorParserRuleCall_0_0() { return cIdSelectorIDSelectorParserRuleCall_0_0; }
		
		//classSelector=ClassSelector
		public Assignment getClassSelectorAssignment_1() { return cClassSelectorAssignment_1; }
		
		//ClassSelector
		public RuleCall getClassSelectorClassSelectorParserRuleCall_1_0() { return cClassSelectorClassSelectorParserRuleCall_1_0; }
		
		//typeSelector=TypeSelector
		public Assignment getTypeSelectorAssignment_2() { return cTypeSelectorAssignment_2; }
		
		//TypeSelector
		public RuleCall getTypeSelectorTypeSelectorParserRuleCall_2_0() { return cTypeSelectorTypeSelectorParserRuleCall_2_0; }
	}
	public class IDSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.IDSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IDSelector:
		//    '#' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' name=ID
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ClassSelector:
		//    '.' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' name=ID
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TypeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.TypeSelector");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TypeSelector:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyIDTerminalRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCssValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCssValueCssValueParserRuleCall_2_0 = (RuleCall)cCssValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Declaration:
		//    property=ID ":" (cssValue+=CssValue)+ ";";
		@Override public ParserRule getRule() { return rule; }
		
		//property=ID ":" (cssValue+=CssValue)+ ";"
		public Group getGroup() { return cGroup; }
		
		//property=ID
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_0_0() { return cPropertyIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(cssValue+=CssValue)+
		public Assignment getCssValueAssignment_2() { return cCssValueAssignment_2; }
		
		//CssValue
		public RuleCall getCssValueCssValueParserRuleCall_2_0() { return cCssValueCssValueParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CssValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.CssValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cIntegerAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerINTTerminalRuleCall_2_0 = (RuleCall)cIntegerAssignment_2.eContents().get(0);
		private final Assignment cComaAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cComaCOMAParserRuleCall_3_0 = (RuleCall)cComaAssignment_3.eContents().get(0);
		private final Assignment cApostropheAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cApostropheAPOSTROPHEParserRuleCall_4_0 = (RuleCall)cApostropheAssignment_4.eContents().get(0);
		private final Assignment cHashtagAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cHashtagHASHTAGParserRuleCall_5_0 = (RuleCall)cHashtagAssignment_5.eContents().get(0);
		private final Assignment cPourcentAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cPourcentPOURCENTParserRuleCall_6_0 = (RuleCall)cPourcentAssignment_6.eContents().get(0);
		
		//CssValue:
		//    name=ID | string=STRING | integer=INT | coma=COMA | apostrophe=APOSTROPHE | hashtag=HASHTAG | pourcent=POURCENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | string=STRING | integer=INT | coma=COMA | apostrophe=APOSTROPHE | hashtag=HASHTAG | pourcent=POURCENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//integer=INT
		public Assignment getIntegerAssignment_2() { return cIntegerAssignment_2; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_2_0() { return cIntegerINTTerminalRuleCall_2_0; }
		
		//coma=COMA
		public Assignment getComaAssignment_3() { return cComaAssignment_3; }
		
		//COMA
		public RuleCall getComaCOMAParserRuleCall_3_0() { return cComaCOMAParserRuleCall_3_0; }
		
		//apostrophe=APOSTROPHE
		public Assignment getApostropheAssignment_4() { return cApostropheAssignment_4; }
		
		//APOSTROPHE
		public RuleCall getApostropheAPOSTROPHEParserRuleCall_4_0() { return cApostropheAPOSTROPHEParserRuleCall_4_0; }
		
		//hashtag=HASHTAG
		public Assignment getHashtagAssignment_5() { return cHashtagAssignment_5; }
		
		//HASHTAG
		public RuleCall getHashtagHASHTAGParserRuleCall_5_0() { return cHashtagHASHTAGParserRuleCall_5_0; }
		
		//pourcent=POURCENT
		public Assignment getPourcentAssignment_6() { return cPourcentAssignment_6; }
		
		//POURCENT
		public RuleCall getPourcentPOURCENTParserRuleCall_6_0() { return cPourcentPOURCENTParserRuleCall_6_0; }
	}
	public class TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.TRUE");
		private final Keyword cTrueKeyword = (Keyword)rule.eContents().get(1);
		
		//TRUE: 'true';
		@Override public ParserRule getRule() { return rule; }
		
		//'true'
		public Keyword getTrueKeyword() { return cTrueKeyword; }
	}
	public class FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.FALSE");
		private final Keyword cFalseKeyword = (Keyword)rule.eContents().get(1);
		
		//FALSE: 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'false'
		public Keyword getFalseKeyword() { return cFalseKeyword; }
	}
	public class HASHTAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.HASHTAG");
		private final Keyword cNumberSignKeyword = (Keyword)rule.eContents().get(1);
		
		//HASHTAG: '#';
		@Override public ParserRule getRule() { return rule; }
		
		//'#'
		public Keyword getNumberSignKeyword() { return cNumberSignKeyword; }
	}
	public class POURCENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.POURCENT");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//POURCENT: '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'%'
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}
	public class COMAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.COMA");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//COMA: ',';
		@Override public ParserRule getRule() { return rule; }
		
		//','
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}
	public class APOSTROPHEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.APOSTROPHE");
		private final Keyword cApostropheKeyword = (Keyword)rule.eContents().get(1);
		
		//APOSTROPHE: "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'"
		public Keyword getApostropheKeyword() { return cApostropheKeyword; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstIntAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstIntINTTerminalRuleCall_0_0 = (RuleCall)cFirstIntAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondIntAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondIntINTTerminalRuleCall_2_0 = (RuleCall)cSecondIntAssignment_2.eContents().get(0);
		
		//Float:
		//    firstInt=INT '.' secondInt=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//firstInt=INT '.' secondInt=INT
		public Group getGroup() { return cGroup; }
		
		//firstInt=INT
		public Assignment getFirstIntAssignment_0() { return cFirstIntAssignment_0; }
		
		//INT
		public RuleCall getFirstIntINTTerminalRuleCall_0_0() { return cFirstIntINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//secondInt=INT
		public Assignment getSecondIntAssignment_2() { return cSecondIntAssignment_2; }
		
		//INT
		public RuleCall getSecondIntINTTerminalRuleCall_2_0() { return cSecondIntINTTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final DocumentElements pDocument;
	private final DataElements pData;
	private final KeyValueElements pKeyValue;
	private final ValueElements pValue;
	private final ArrayElements pArray;
	private final NestedObjectElements pNestedObject;
	private final BuildElements pBuild;
	private final ElementBuildElements pElementBuild;
	private final VariableElements pVariable;
	private final VariableDElements pVariableD;
	private final PageElements pPage;
	private final ElementPageElements pElementPage;
	private final RowElements pRow;
	private final ElementRowElements pElementRow;
	private final ColElements pCol;
	private final ArrayCElements pArrayC;
	private final PositionElements pPosition;
	private final ObjectCElements pObjectC;
	private final ImgElements pImg;
	private final ClassDElements pClassD;
	private final FusionElements pFusion;
	private final ColspanElements pColspan;
	private final RowspanElements pRowspan;
	private final FunctionElements pFunction;
	private final SumFunctionElements pSumFunction;
	private final ProdFunctionElements pProdFunction;
	private final DivFunctionElements pDivFunction;
	private final Argument1Elements pArgument1;
	private final Argument2Elements pArgument2;
	private final ConditionalElements pConditional;
	private final EqualConditionElements pEqualCondition;
	private final NoEqualConditionElements pNoEqualCondition;
	private final LoopElements pLoop;
	private final WithElements pWith;
	private final ForElements pFor;
	private final OtherElementElements pOtherElement;
	private final StyleElements pStyle;
	private final CssElements pCss;
	private final RuleElements pRule;
	private final SelectorElements pSelector;
	private final IDSelectorElements pIDSelector;
	private final ClassSelectorElements pClassSelector;
	private final TypeSelectorElements pTypeSelector;
	private final DeclarationElements pDeclaration;
	private final CssValueElements pCssValue;
	private final TerminalRule tSTRING;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TRUEElements pTRUE;
	private final FALSEElements pFALSE;
	private final HASHTAGElements pHASHTAG;
	private final POURCENTElements pPOURCENT;
	private final COMAElements pCOMA;
	private final APOSTROPHEElements pAPOSTROPHE;
	private final FloatElements pFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GrammarGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDocument = new DocumentElements();
		this.pData = new DataElements();
		this.pKeyValue = new KeyValueElements();
		this.pValue = new ValueElements();
		this.pArray = new ArrayElements();
		this.pNestedObject = new NestedObjectElements();
		this.pBuild = new BuildElements();
		this.pElementBuild = new ElementBuildElements();
		this.pVariable = new VariableElements();
		this.pVariableD = new VariableDElements();
		this.pPage = new PageElements();
		this.pElementPage = new ElementPageElements();
		this.pRow = new RowElements();
		this.pElementRow = new ElementRowElements();
		this.pCol = new ColElements();
		this.pArrayC = new ArrayCElements();
		this.pPosition = new PositionElements();
		this.pObjectC = new ObjectCElements();
		this.pImg = new ImgElements();
		this.pClassD = new ClassDElements();
		this.pFusion = new FusionElements();
		this.pColspan = new ColspanElements();
		this.pRowspan = new RowspanElements();
		this.pFunction = new FunctionElements();
		this.pSumFunction = new SumFunctionElements();
		this.pProdFunction = new ProdFunctionElements();
		this.pDivFunction = new DivFunctionElements();
		this.pArgument1 = new Argument1Elements();
		this.pArgument2 = new Argument2Elements();
		this.pConditional = new ConditionalElements();
		this.pEqualCondition = new EqualConditionElements();
		this.pNoEqualCondition = new NoEqualConditionElements();
		this.pLoop = new LoopElements();
		this.pWith = new WithElements();
		this.pFor = new ForElements();
		this.pOtherElement = new OtherElementElements();
		this.pStyle = new StyleElements();
		this.pCss = new CssElements();
		this.pRule = new RuleElements();
		this.pSelector = new SelectorElements();
		this.pIDSelector = new IDSelectorElements();
		this.pClassSelector = new ClassSelectorElements();
		this.pTypeSelector = new TypeSelectorElements();
		this.pDeclaration = new DeclarationElements();
		this.pCssValue = new CssValueElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.STRING");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Grammar.ID");
		this.pTRUE = new TRUEElements();
		this.pFALSE = new FALSEElements();
		this.pHASHTAG = new HASHTAGElements();
		this.pPOURCENT = new POURCENTElements();
		this.pCOMA = new COMAElements();
		this.pAPOSTROPHE = new APOSTROPHEElements();
		this.pFloat = new FloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Grammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    document+=Document;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Document:
	//    (data=Data)? build=Build (style=Style)?;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	////Section de définitions des données du document
	//Data:
	//    'data' '{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*) '}';
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//KeyValue:
	//    string=STRING ':' value=Value;
	public KeyValueElements getKeyValueAccess() {
		return pKeyValue;
	}
	
	public ParserRule getKeyValueRule() {
		return getKeyValueAccess().getRule();
	}
	
	//Value:
	//    string=STRING | integer=INT | floatValue=Float | trueV=TRUE | falseV=FALSE /*| id=ID */| array=Array | nestedObject=NestedObject | variable=Variable;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Array:
	//    '[' (values+=Value (',' values+=Value)*)? ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//NestedObject:
	//    '{' (keyValue+=KeyValue (',' keyValue+=KeyValue)*)? '}';
	public NestedObjectElements getNestedObjectAccess() {
		return pNestedObject;
	}
	
	public ParserRule getNestedObjectRule() {
		return getNestedObjectAccess().getRule();
	}
	
	//// Section de construction du document
	//Build:
	//    'document' variable=Variable (allInOne = 'allInOne' '=' (trueV=TRUE | falseF=FALSE)) '{'
	//        (elementBuild+=ElementBuild)*
	//    '}';
	public BuildElements getBuildAccess() {
		return pBuild;
	}
	
	public ParserRule getBuildRule() {
		return getBuildAccess().getRule();
	}
	
	//ElementBuild:
	//    variableD=VariableD | page=Page | loop=Loop | conditional=Conditional
	//;
	public ElementBuildElements getElementBuildAccess() {
		return pElementBuild;
	}
	
	public ParserRule getElementBuildRule() {
		return getElementBuildAccess().getRule();
	}
	
	//Variable:
	//    '$' name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableD:
	//    (variable=Variable ('[' '$' name=ID ']')?) '=' (value+=Value | function+=Function)
	//;
	public VariableDElements getVariableDAccess() {
		return pVariableD;
	}
	
	public ParserRule getVariableDRule() {
		return getVariableDAccess().getRule();
	}
	
	//Page:
	//    'page' '(' (variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | string=STRING )')' '{'
	//        (elementPage+=ElementPage)*
	//    '}'
	//;
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}
	
	//ElementPage:
	//    row=Row | loop=Loop | conditional=Conditional | (variable=VariableD ';')
	//;
	public ElementPageElements getElementPageAccess() {
		return pElementPage;
	}
	
	public ParserRule getElementPageRule() {
		return getElementPageAccess().getRule();
	}
	
	//Row:
	//    'row' '{'
	//        (elementRow+=ElementRow)*
	//    '}'
	//;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//ElementRow:
	//    variable=Variable | variableD=VariableD | col=Col | conditional=Conditional | loop=Loop
	//;
	public ElementRowElements getElementRowAccess() {
		return pElementRow;
	}
	
	public ParserRule getElementRowRule() {
		return getElementRowAccess().getRule();
	}
	
	//Col:
	//    'col' fusion=Fusion ( img=Img | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? | variableD=VariableD | string=STRING | integer=INT | floatValue=Float | function=Function ) classD=ClassD
	//;
	public ColElements getColAccess() {
		return pCol;
	}
	
	public ParserRule getColRule() {
		return getColAccess().getRule();
	}
	
	//ArrayC:
	//    '[' position=Position ']';
	public ArrayCElements getArrayCAccess() {
		return pArrayC;
	}
	
	public ParserRule getArrayCRule() {
		return getArrayCAccess().getRule();
	}
	
	//Position:
	//    integer=INT | variable=Variable
	//;
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//ObjectC:
	//    '.' name=ID
	//;
	public ObjectCElements getObjectCAccess() {
		return pObjectC;
	}
	
	public ParserRule getObjectCRule() {
		return getObjectCAccess().getRule();
	}
	
	//Img:
	//    'img' (classD=ClassD) 'src' ':' (string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?) ('alt' ':' stringAlt=STRING)?
	//;
	public ImgElements getImgAccess() {
		return pImg;
	}
	
	public ParserRule getImgRule() {
		return getImgAccess().getRule();
	}
	
	//ClassD:
	//    ('class' '=' string=STRING)?
	//;
	public ClassDElements getClassDAccess() {
		return pClassD;
	}
	
	public ParserRule getClassDRule() {
		return getClassDAccess().getRule();
	}
	
	//Fusion:
	//    (colspan=Colspan | rowspan=Rowspan)?
	//;
	public FusionElements getFusionAccess() {
		return pFusion;
	}
	
	public ParserRule getFusionRule() {
		return getFusionAccess().getRule();
	}
	
	//Colspan:
	//    'colspan' ':' (integer=INT | variable=Variable)
	//;
	public ColspanElements getColspanAccess() {
		return pColspan;
	}
	
	public ParserRule getColspanRule() {
		return getColspanAccess().getRule();
	}
	
	//Rowspan:
	//    'rowspan' ':' (integer=INT | variable=Variable)
	//;
	public RowspanElements getRowspanAccess() {
		return pRowspan;
	}
	
	public ParserRule getRowspanRule() {
		return getRowspanAccess().getRule();
	}
	
	//Function:
	//    sumFunction=SumFunction | prodFunction=ProdFunction | divFunction=DivFunction
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//SumFunction:
	//    'SUM' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' (argument2+=Argument2)+ ']') ')'
	//;
	public SumFunctionElements getSumFunctionAccess() {
		return pSumFunction;
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}
	
	//ProdFunction:
	//    'PROD' '(' ((argument1+=Argument1 (',' argument1+=Argument1)*)? | '[' argument2+=Argument2 ']') ')'
	//;
	public ProdFunctionElements getProdFunctionAccess() {
		return pProdFunction;
	}
	
	public ParserRule getProdFunctionRule() {
		return getProdFunctionAccess().getRule();
	}
	
	//DivFunction:
	//    'DIV' '(' argument1+=Argument1 ',' argument1+=Argument1 ')'
	//;
	public DivFunctionElements getDivFunctionAccess() {
		return pDivFunction;
	}
	
	public ParserRule getDivFunctionRule() {
		return getDivFunctionAccess().getRule();
	}
	
	//Argument1:
	//    integer=INT | floatValue=Float | string=STRING | variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)?
	//;
	public Argument1Elements getArgument1Access() {
		return pArgument1;
	}
	
	public ParserRule getArgument1Rule() {
		return getArgument1Access().getRule();
	}
	
	//Argument2:
	//    (variable+=Variable | integer=INT) (('-' | '+') (variable+=Variable | integerEnd1=INT))? ',' (variable+=Variable | integerEnd2=INT) (('-' | '+') (variable+=Variable | integerEnd3=INT))?
	//;
	public Argument2Elements getArgument2Access() {
		return pArgument2;
	}
	
	public ParserRule getArgument2Rule() {
		return getArgument2Access().getRule();
	}
	
	//Conditional:
	//    'if' (equalCondition=EqualCondition | notEqualCondition=NoEqualCondition) 'then' '{'
	//        (otherElement+=OtherElement)*
	//    '}'
	//;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//EqualCondition:
	//    (variable=Variable 'is' value=Value 'then')
	//;
	public EqualConditionElements getEqualConditionAccess() {
		return pEqualCondition;
	}
	
	public ParserRule getEqualConditionRule() {
		return getEqualConditionAccess().getRule();
	}
	
	//NoEqualCondition:
	//    (variable=Variable 'isNot' value=Value 'then')
	//;
	public NoEqualConditionElements getNoEqualConditionAccess() {
		return pNoEqualCondition;
	}
	
	public ParserRule getNoEqualConditionRule() {
		return getNoEqualConditionAccess().getRule();
	}
	
	//Loop:
	//    withLoop=With | forLoop=For
	//;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//With:
	//    'with' init=Variable 'in' variable=Variable (objectC=ObjectC)? (arrayC=ArrayC)? '{'
	//        (otherElement+=OtherElement)*
	//    '}'
	//;
	public WithElements getWithAccess() {
		return pWith;
	}
	
	public ParserRule getWithRule() {
		return getWithAccess().getRule();
	}
	
	//For:
	//    increment=Variable 'from' (initWithVariable=Variable | initWithInteger=INT) 'to' (endWithVariable=Variable (objectC=ObjectC)? | endWithInteger=INT)'{'
	//        (otherElement+=OtherElement)*
	//    '}'
	//;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//OtherElement:
	//    page=Page | row=Row | col=Col | loop=Loop | conditional=Conditional
	//;
	public OtherElementElements getOtherElementAccess() {
		return pOtherElement;
	}
	
	public ParserRule getOtherElementRule() {
		return getOtherElementAccess().getRule();
	}
	
	////Section de définition du style du document
	//Style:
	//    'style' '{' css=Css '}';
	public StyleElements getStyleAccess() {
		return pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}
	
	//Css:
	//    (rules+=Rule)*;
	public CssElements getCssAccess() {
		return pCss;
	}
	
	public ParserRule getCssRule() {
		return getCssAccess().getRule();
	}
	
	//Rule:
	//    selector=Selector "{"
	//        (declarations+=Declaration)*
	//    "}";
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Selector:
	//    idSelector=IDSelector | classSelector=ClassSelector | typeSelector=TypeSelector;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//IDSelector:
	//    '#' name=ID;
	public IDSelectorElements getIDSelectorAccess() {
		return pIDSelector;
	}
	
	public ParserRule getIDSelectorRule() {
		return getIDSelectorAccess().getRule();
	}
	
	//ClassSelector:
	//    '.' name=ID;
	public ClassSelectorElements getClassSelectorAccess() {
		return pClassSelector;
	}
	
	public ParserRule getClassSelectorRule() {
		return getClassSelectorAccess().getRule();
	}
	
	//TypeSelector:
	//    name=ID;
	public TypeSelectorElements getTypeSelectorAccess() {
		return pTypeSelector;
	}
	
	public ParserRule getTypeSelectorRule() {
		return getTypeSelectorAccess().getRule();
	}
	
	//Declaration:
	//    property=ID ":" (cssValue+=CssValue)+ ";";
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//CssValue:
	//    name=ID | string=STRING | integer=INT | coma=COMA | apostrophe=APOSTROPHE | hashtag=HASHTAG | pourcent=POURCENT
	//;
	public CssValueElements getCssValueAccess() {
		return pCssValue;
	}
	
	public ParserRule getCssValueRule() {
		return getCssValueAccess().getRule();
	}
	
	//terminal STRING: '"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ID: ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '-' | '#')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//TRUE: 'true';
	public TRUEElements getTRUEAccess() {
		return pTRUE;
	}
	
	public ParserRule getTRUERule() {
		return getTRUEAccess().getRule();
	}
	
	//FALSE: 'false';
	public FALSEElements getFALSEAccess() {
		return pFALSE;
	}
	
	public ParserRule getFALSERule() {
		return getFALSEAccess().getRule();
	}
	
	//HASHTAG: '#';
	public HASHTAGElements getHASHTAGAccess() {
		return pHASHTAG;
	}
	
	public ParserRule getHASHTAGRule() {
		return getHASHTAGAccess().getRule();
	}
	
	//POURCENT: '%';
	public POURCENTElements getPOURCENTAccess() {
		return pPOURCENT;
	}
	
	public ParserRule getPOURCENTRule() {
		return getPOURCENTAccess().getRule();
	}
	
	//COMA: ',';
	public COMAElements getCOMAAccess() {
		return pCOMA;
	}
	
	public ParserRule getCOMARule() {
		return getCOMAAccess().getRule();
	}
	
	//APOSTROPHE: "'";
	public APOSTROPHEElements getAPOSTROPHEAccess() {
		return pAPOSTROPHE;
	}
	
	public ParserRule getAPOSTROPHERule() {
		return getAPOSTROPHEAccess().getRule();
	}
	
	//Float:
	//    firstInt=INT '.' secondInt=INT
	//;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
