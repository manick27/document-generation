/**
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.generator;

import java.util.ArrayList;
import java.util.HashMap;

@SuppressWarnings("all")
public class Context {
  private HashMap<String, Object> variables = new HashMap<String, Object>();

  public Object setVariable(final String name, final Object value) {
    return this.variables.put(name, value);
  }

  public Object getVariable(final String name) {
    return this.variables.get(name);
  }

  public Object removeVariable(final String name) {
    return this.variables.remove(name);
  }

  public Object incrementVariable(final String name, final int amount) {
    Object _xblockexpression = null;
    {
      final Object current = this.getVariable(name);
      Object _xifexpression = null;
      if ((current instanceof Integer)) {
        Object _xblockexpression_1 = null;
        {
          final int incremented = (((Integer) current).intValue() + amount);
          _xblockexpression_1 = this.setVariable(name, Integer.valueOf(incremented));
        }
        _xifexpression = _xblockexpression_1;
      } else {
        throw new IllegalArgumentException((("Variable \'" + name) + "\' is not a number and cannot be incremented."));
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public Object addToArray(final String name, final Number value) {
    Object _xblockexpression = null;
    {
      ArrayList<Number> _arrayList = new ArrayList<Number>();
      Object _orDefault = this.variables.getOrDefault(name, _arrayList);
      final ArrayList<Number> array = ((ArrayList<Number>) _orDefault);
      array.add(value);
      _xblockexpression = this.variables.put(name, array);
    }
    return _xblockexpression;
  }

  public Object getArray(final String name) {
    ArrayList<Number> _arrayList = new ArrayList<Number>();
    return this.variables.getOrDefault(name, _arrayList);
  }
}
