/**
 * generated by Xtext 2.35.0-SNAPSHOT
 */
package org.xtext.example.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.myDsl.Build;
import org.xtext.example.myDsl.Document;
import org.xtext.example.myDsl.ElementBuild;
import org.xtext.example.myDsl.For;
import org.xtext.example.myDsl.Loop;
import org.xtext.example.myDsl.OtherElement;
import org.xtext.example.myDsl.Page;
import org.xtext.example.myDsl.Value;
import org.xtext.example.myDsl.Variable;
import org.xtext.example.myDsl.With;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GrammarGenerator extends AbstractGenerator {
  private final Context context1 = new Context();

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(resource.getAllContents());
    for (final EObject element : _iterable) {
      if ((element instanceof Document)) {
        final HtmlCodeGenerator seqgeneratorHtml = new HtmlCodeGenerator(this.context1);
        Object _valueOfVariableInData = seqgeneratorHtml.getValueOfVariableInData(((Document)element).getBuild().getVariable().getName(), ((Document)element).getData());
        String fileName = ((String) _valueOfVariableInData);
        fileName = fileName.replace(" ", "_");
        Build _build = ((Document)element).getBuild();
        boolean _tripleNotEquals = (_build != null);
        if (_tripleNotEquals) {
          if (((((Document)element).getBuild().getAllInOne() != null) && (((Document)element).getBuild().getFalseF() != null))) {
            EList<ElementBuild> _elementBuild = ((Document)element).getBuild().getElementBuild();
            for (final ElementBuild elementBuild : _elementBuild) {
              Page _page = elementBuild.getPage();
              boolean _tripleNotEquals_1 = (_page != null);
              if (_tripleNotEquals_1) {
                final StringBuilder seqgeneratedCode = new StringBuilder();
                final StringBuilder nameOfPage = new StringBuilder();
                seqgeneratedCode.append(this.buildHtmlCodeForPage(elementBuild.getPage(), ((Document)element), null, seqgeneratorHtml));
                nameOfPage.append(seqgeneratorHtml.getNameOfPage(elementBuild.getPage(), ((Document)element).getData(), null));
                fsa.generateFile((((fileName + "/html/") + nameOfPage) + ".html"), seqgeneratedCode);
                fsa.generateFile((((fileName + "/txt/") + nameOfPage) + ".txt"), seqgeneratedCode);
              } else {
                Loop _loop = elementBuild.getLoop();
                boolean _tripleNotEquals_2 = (_loop != null);
                if (_tripleNotEquals_2) {
                  For _forLoop = elementBuild.getLoop().getForLoop();
                  boolean _tripleNotEquals_3 = (_forLoop != null);
                  if (_tripleNotEquals_3) {
                    int _initWithInteger = elementBuild.getLoop().getForLoop().getInitWithInteger();
                    boolean _lessEqualsThan = (0 <= _initWithInteger);
                    if (_lessEqualsThan) {
                      int p = elementBuild.getLoop().getForLoop().getInitWithInteger();
                      EList<OtherElement> _otherElement = elementBuild.getLoop().getForLoop().getOtherElement();
                      for (final OtherElement otherElement : _otherElement) {
                        Page _page_1 = otherElement.getPage();
                        boolean _tripleNotEquals_4 = (_page_1 != null);
                        if (_tripleNotEquals_4) {
                          this.context1.setVariable(elementBuild.getLoop().getForLoop().getIncrement().getName(), Integer.valueOf(p));
                          Variable _endWithVariable = elementBuild.getLoop().getForLoop().getEndWithVariable();
                          boolean _tripleNotEquals_5 = (_endWithVariable != null);
                          if (_tripleNotEquals_5) {
                            for (int i = p; (i < seqgeneratorHtml.getLengthForArray(elementBuild.getLoop().getForLoop().getEndWithVariable().getName(), ((Document)element).getData())); i++) {
                              {
                                final StringBuilder seqgeneratedCode_1 = new StringBuilder();
                                final StringBuilder nameOfPage_1 = new StringBuilder();
                                seqgeneratedCode_1.append(this.buildHtmlCodeForPage(otherElement.getPage(), ((Document)element), null, seqgeneratorHtml));
                                nameOfPage_1.append(seqgeneratorHtml.getNameOfPage(otherElement.getPage(), ((Document)element).getData(), null));
                                fsa.generateFile((((fileName + "/html/") + nameOfPage_1) + ".html"), seqgeneratedCode_1);
                                this.context1.incrementVariable(elementBuild.getLoop().getForLoop().getIncrement().getName(), 1);
                              }
                            }
                          } else {
                            int _endWithInteger = elementBuild.getLoop().getForLoop().getEndWithInteger();
                            boolean _lessEqualsThan_1 = (0 <= _endWithInteger);
                            if (_lessEqualsThan_1) {
                              for (int i = p; (i <= elementBuild.getLoop().getForLoop().getEndWithInteger()); i++) {
                                {
                                  final StringBuilder seqgeneratedCode_1 = new StringBuilder();
                                  final StringBuilder nameOfPage_1 = new StringBuilder();
                                  seqgeneratedCode_1.append(this.buildHtmlCodeForPage(otherElement.getPage(), ((Document)element), null, seqgeneratorHtml));
                                  nameOfPage_1.append(seqgeneratorHtml.getNameOfPage(otherElement.getPage(), ((Document)element).getData(), null));
                                  fsa.generateFile((((fileName + "/html/") + nameOfPage_1) + ".html"), seqgeneratedCode_1);
                                  this.context1.incrementVariable(elementBuild.getLoop().getForLoop().getIncrement().getName(), 1);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    With _withLoop = elementBuild.getLoop().getWithLoop();
                    boolean _tripleNotEquals_6 = (_withLoop != null);
                    if (_tripleNotEquals_6) {
                      if (((elementBuild.getLoop().getWithLoop().getInit() != null) && (elementBuild.getLoop().getWithLoop().getVariable() != null))) {
                        EList<OtherElement> _otherElement_1 = elementBuild.getLoop().getWithLoop().getOtherElement();
                        for (final OtherElement otherElement_1 : _otherElement_1) {
                          Page _page_2 = otherElement_1.getPage();
                          boolean _tripleNotEquals_7 = (_page_2 != null);
                          if (_tripleNotEquals_7) {
                            for (int i = 0; (i < seqgeneratorHtml.getLengthForArray(elementBuild.getLoop().getWithLoop().getVariable().getName(), ((Document)element).getData())); i++) {
                              {
                                final StringBuilder seqgeneratedCode_1 = new StringBuilder();
                                final StringBuilder nameOfPage_1 = new StringBuilder();
                                Value object = seqgeneratorHtml.getObjetInArray(elementBuild.getLoop().getWithLoop().getVariable().getName(), ((Document)element).getData(), i);
                                this.context1.setVariable(elementBuild.getLoop().getWithLoop().getInit().getName(), object);
                                seqgeneratedCode_1.append(this.buildHtmlCodeForPage(otherElement_1.getPage(), ((Document)element), elementBuild.getLoop().getWithLoop().getInit().getName(), seqgeneratorHtml));
                                nameOfPage_1.append(seqgeneratorHtml.getNameOfPage(otherElement_1.getPage(), ((Document)element).getData(), object));
                                fsa.generateFile((((fileName + "/html/") + nameOfPage_1) + ".html"), seqgeneratedCode_1);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            final String seqgeneratedCode_1 = seqgeneratorHtml.generate(((Document)element), fileName.toString());
            final String htmlFilePath = (((fileName + "/html/") + fileName) + ".html");
            fsa.generateFile(htmlFilePath, seqgeneratedCode_1);
          }
        }
      }
    }
  }

  public StringBuilder buildHtmlCodeForPage(final Page page, final Document document, final String withLoopInitName, final HtmlCodeGenerator seqgeneratorHtml) {
    final CssCodeGenerator seqgeneratorCss = new CssCodeGenerator();
    final StringBuilder cssCode = seqgeneratorCss.generate(document.getStyle());
    final StringBuilder buildCode = new StringBuilder();
    Value object = ((Value) null);
    if ((withLoopInitName != null)) {
      Object _variable = this.context1.getVariable(withLoopInitName);
      object = ((Value) _variable);
      seqgeneratorHtml.buildWithLoopPage(buildCode, page, document, withLoopInitName);
    } else {
      seqgeneratorHtml.buildPage(buildCode, page, document);
    }
    final StringBuilder code = new StringBuilder();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html lang=\"en\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<meta charset=\"UTF-8\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<title>");
    Object _nameOfPage = seqgeneratorHtml.getNameOfPage(page, document.getData(), object);
    String _plus = (_builder.toString() + _nameOfPage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("</title>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("<style>");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + cssCode);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</style>");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("</head>");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("<body>");
    _builder_2.newLine();
    String _plus_3 = (_plus_2 + _builder_2);
    String _plus_4 = (_plus_3 + buildCode);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("\t");
    _builder_3.append("</body>");
    _builder_3.newLine();
    _builder_3.append("</html>");
    String _plus_5 = (_plus_4 + _builder_3);
    code.append(_plus_5);
    return code;
  }
}
